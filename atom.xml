<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ranjith's Blog]]></title>
  <link href="http://ranjithkumar.github.io/atom.xml" rel="self"/>
  <link href="http://ranjithkumar.github.io/"/>
  <updated>2014-12-15T12:41:16+05:30</updated>
  <id>http://ranjithkumar.github.io/</id>
  <author>
    <name><![CDATA[Ranjithkumar Ravi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails I18n translations on the JavaScript]]></title>
    <link href="http://ranjithkumar.github.io/blog/2014/12/12/rails-i18n-translations-on-the-javascript/"/>
    <updated>2014-12-12T11:49:21+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2014/12/12/rails-i18n-translations-on-the-javascript</id>
    <content type="html"><![CDATA[<p>Recently, my user story demanded me to translate some text in raw JavaScript file. I know that I can easily use them in my <em>.js.erb</em> templates. But what about the Javascript files(<em>.js</em>)?</p>

<p><a href="https://github.com/fnando/i18n-js"><strong>I18n.js</strong></a> is a small library to provide the Rails I18n translations on the JavaScript.</p>

<!--more-->


<p><strong>Steps for setting up i18n-js:</strong></p>

<p>1) Add i18n-js gem to your Gemfile<br/></p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #cccccc">gem</span> <span style="color: #cd0000">&quot;i18n-js&quot;</span><span style="color: #cccccc">,</span> <span style="color: #cd0000">&quot;&gt;= 3.0.0.rc8&quot;</span>
<span style="color: #cccccc">bundle</span> <span style="color: #cccccc">install</span>
</pre></div>


<p>2) If you&rsquo;re using the asset pipeline, add the following lines in <em>app/assets/javascripts/application.js</em></p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #cd0000">//</span><span style="color: #3399cc">=</span> <span style="color: #cd00cd">require</span> <span style="color: #cccccc">i18n</span>
<span style="color: #cd0000">//</span><span style="color: #3399cc">=</span> <span style="color: #cd00cd">require</span> <span style="color: #cccccc">i18n</span><span style="color: #3399cc">/</span><span style="color: #cccccc">translations</span>
</pre></div>


<p>If you&rsquo;re not using the asset pipeline, add the following lines in your <em>application.html.erb</em> (layout file)</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #3399cc">&lt;%=</span> <span style="color: #cccccc">javascript_include_tag</span> <span style="color: #cd0000">&quot;i18n&quot;</span> <span style="color: #3399cc">%&gt;</span>
<span style="color: #3399cc">&lt;%=</span> <span style="color: #cccccc">javascript_include_tag</span> <span style="color: #cd0000">&quot;translations&quot;</span> <span style="color: #3399cc">%&gt;</span>
</pre></div>


<p>3) To export all translation files, run the following commands</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #cccccc">rake</span> <span style="color: #cd0000">i18n</span><span style="color: #cccccc">:</span><span style="color: #cd0000">js</span><span style="color: #cccccc">:export</span>
</pre></div>


<p>4) Add the following lines in your <em>application.html.erb</em> (layout file)</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #cccccc">&lt;script type=</span><span style="color: #cd0000">&quot;text/javascript&quot;</span><span style="color: #cccccc">&gt;</span>
     <span style="color: #cccccc">I18n.defaultLocale</span> <span style="color: #3399cc">=</span> <span style="color: #cd0000">&quot;</span><span style="color: #3399cc">&lt;%=</span> <span style="color: #cccccc">I18n</span><span style="color: #3399cc">.</span><span style="color: #cccccc">default_locale</span> <span style="color: #3399cc">%&gt;</span><span style="color: #cd0000">&quot;</span><span style="color: #cccccc">;</span>
     <span style="color: #cccccc">I18n.locale</span> <span style="color: #3399cc">=</span> <span style="color: #cd0000">&quot;</span><span style="color: #3399cc">&lt;%=</span> <span style="color: #cccccc">I18n</span><span style="color: #3399cc">.</span><span style="color: #cccccc">locale</span> <span style="color: #3399cc">%&gt;</span><span style="color: #cd0000">&quot;</span><span style="color: #cccccc">;</span>
<span style="color: #cccccc">&lt;/script&gt;</span>
</pre></div>


<p>5) Finally, you can use translate your text in <em>js</em> file.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #cccccc">I18n</span><span style="color: #3399cc">.</span><span style="color: #cccccc">t(</span><span style="color: #cd0000">&quot;some.scoped.translation&quot;</span><span style="color: #cccccc">);</span>
</pre></div>


<p><strong>Note:</strong> Run the following command every time you have new translation in the <em>.yml</em> file</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #cccccc">rake</span> <span style="color: #cd0000">i18n</span><span style="color: #cccccc">:</span><span style="color: #cd0000">js</span><span style="color: #cccccc">:export</span>
</pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metaprogramming Ruby]]></title>
    <link href="http://ranjithkumar.github.io/blog/2014/12/01/metaprogramming-ruby/"/>
    <updated>2014-12-01T12:16:06+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2014/12/01/metaprogramming-ruby</id>
    <content type="html"><![CDATA[<p>I Love the book &ldquo;Metaprogramming Ruby&rdquo; by Paolo Perrotta and found it very informative. The idioms defined in the book are so helpful. Here I have created a reference based on them for my own use. Hopefully it will help others too.</p>

<p><strong>1) Dynamic Dispatch</strong><br/>
Ruby allows us to dynamically call unknown methods(even private methods) on objects.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># object.send(message, *arguments)</span>
<span style="color: white">2.send(:+, 3) # => 5</span>
</pre></div>




<!--more-->


<p><strong>2) Pattern Dispatch</strong><br/>
Similar to Dynamic Dispatch, but uses a convention or pattern to identify which methods to call.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #cdcd00">class</span> <span style="color: #00cdcd">User</span>
  <span style="color: #cdcd00">attr_accessor</span> <span style="color: #cd0000">:first_name</span>
  <span style="color: #cdcd00">attr_accessor</span> <span style="color: #cd0000">:last_name</span>

  <span style="color: #cdcd00">def</span> <span style="color: #cccccc">full_name</span>
    <span style="color: #cd0000">&quot;#{</span><span style="color: #cccccc">first_name</span><span style="color: #cd0000">} #{</span><span style="color: #cccccc">last_name</span><span style="color: #cd0000">}&quot;</span>
  <span style="color: #cdcd00">end</span>
<span style="color: #cdcd00">end</span>

<span style="color: #cccccc">user</span> <span style="color: #3399cc">=</span> <span style="color: #cccccc">User</span><span style="color: #3399cc">.</span><span style="color: #cccccc">new</span>
<span style="color: #cccccc">user</span><span style="color: #3399cc">.</span><span style="color: #cccccc">first_name</span> <span style="color: #3399cc">=</span> <span style="color: #cd0000">&quot;Ranjithkumar&quot;</span>
<span style="color: #cccccc">user</span><span style="color: #3399cc">.</span><span style="color: #cccccc">last_name</span> <span style="color: #3399cc">=</span> <span style="color: #cd0000">&quot;Ravi&quot;</span>

<span style="color: #75715e"># use pattern dispatch to invoke all &#39;name&#39; methods</span>
<span style="color: #cccccc">user</span><span style="color: #3399cc">.</span><span style="color: #cccccc">public_methods</span><span style="color: #3399cc">.</span><span style="color: #cccccc">each</span> <span style="color: #cdcd00">do</span> <span style="color: #3399cc">|</span><span style="color: #cccccc">method_name</span><span style="color: #3399cc">|</span>
  <span style="color: #cd00cd">puts</span> <span style="color: #cd0000">&quot;#{</span><span style="color: #cccccc">method_name</span><span style="color: #cd0000">} = #{</span><span style="color: #cccccc">user</span><span style="color: #3399cc">.</span><span style="color: #cccccc">send(method_name)</span><span style="color: #cd0000">}&quot;</span> <span style="color: #cdcd00">if</span> <span style="color: #cccccc">method_name</span> <span style="color: #3399cc">=~</span> <span style="color: #cd0000">/_name$/</span>
<span style="color: #cdcd00">end</span>

<span style="color: #75715e"># -- output --</span>
<span style="color: #75715e"># first_name = Ranjithkumar</span>
<span style="color: #75715e"># last_name = Ravi</span>
<span style="color: #75715e"># full_name = Ranjithkumar Ravi</span>
</pre></div>


<p><strong>3) Dynamic Method</strong><br/>
Ruby allows us to dynamically create methods at runtime</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #cdcd00">class</span> <span style="color: #00cdcd">Bar</span>
  <span style="color: #cdcd00">def</span> <span style="color: #00cdcd">self</span><span style="color: #3399cc">.</span><span style="color: #cccccc">create_method(</span><span style="color: #cd00cd">method</span><span style="color: #cccccc">)</span>
    <span style="color: #cccccc">define_method</span> <span style="color: #cd0000">&quot;my_#{</span><span style="color: #cd00cd">method</span><span style="color: #cd0000">}&quot;</span> <span style="color: #cdcd00">do</span>
      <span style="color: #cd00cd">puts</span> <span style="color: #cd0000">&quot;Dynamic method called &#39;my_#{</span><span style="color: #cd00cd">method</span><span style="color: #cd0000">}&#39;&quot;</span>
    <span style="color: #cdcd00">end</span>
  <span style="color: #cdcd00">end</span>

  <span style="color: #75715e"># these methods are executed within the definition of the Bar class</span>
  <span style="color: #cccccc">create_method</span> <span style="color: #cd0000">:foo</span>
  <span style="color: #cccccc">create_method</span> <span style="color: #cd0000">:bar</span>
<span style="color: #cdcd00">end</span>

<span style="color: #75715e"># Test out our dynamic methods</span>
<span style="color: #cccccc">Bar</span><span style="color: #3399cc">.</span><span style="color: #cccccc">new</span><span style="color: #3399cc">.</span><span style="color: #cccccc">respond_to?</span> <span style="color: #cd0000">:my_foo</span> <span style="color: #75715e"># =&gt; true</span>
<span style="color: #cccccc">Bar</span><span style="color: #3399cc">.</span><span style="color: #cccccc">new</span><span style="color: #3399cc">.</span><span style="color: #cccccc">my_foo</span> <span style="color: #75715e"># =&gt; &quot;Dynamic method called &#39;my_foo&#39;&quot;</span>
<span style="color: #cccccc">Bar</span><span style="color: #3399cc">.</span><span style="color: #cccccc">new</span><span style="color: #3399cc">.</span><span style="color: #cccccc">my_bar</span> <span style="color: #75715e"># =&gt; &quot;Dynamic method called &#39;my_bar&#39;&quot;</span>
</pre></div>


<p><strong>4) Ghost Method</strong><br/>
When a method is not found, Ruby will send this method as a symbol to method_missing.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #cdcd00">class</span> <span style="color: #00cdcd">Example</span>
  <span style="color: #cdcd00">def</span> <span style="color: #cccccc">method_missing(method_name,</span> <span style="color: #3399cc">*</span><span style="color: #cccccc">args)</span>
    <span style="color: #cd00cd">puts</span> <span style="color: #cd0000">&quot;You called: #{</span><span style="color: #cccccc">method_name</span><span style="color: #cd0000">}(#{</span><span style="color: #cccccc">args</span><span style="color: #3399cc">.</span><span style="color: #cccccc">join(</span><span style="color: #cd0000">&#39;, &#39;</span><span style="color: #cccccc">)</span><span style="color: #cd0000">})&quot;</span>
    <span style="color: #cd00cd">puts</span> <span style="color: #cd0000">&quot;You also passed a block&quot;</span> <span style="color: #cdcd00">if</span> <span style="color: #cd00cd">block_given?</span>
  <span style="color: #cdcd00">end</span>
<span style="color: #cdcd00">end</span>

<span style="color: #cccccc">Example</span><span style="color: #3399cc">.</span><span style="color: #cccccc">new</span><span style="color: #3399cc">.</span><span style="color: #cccccc">this_is_cool(</span><span style="color: #cd00cd">1</span><span style="color: #cccccc">,</span> <span style="color: #cd00cd">2</span><span style="color: #cccccc">,</span> <span style="color: #cd00cd">3</span><span style="color: #cccccc">)</span> <span style="color: #75715e"># =&gt; You called: this_is_cool(1, 2, 3)   </span>
<span style="color: #cccccc">Example</span><span style="color: #3399cc">.</span><span style="color: #cccccc">new</span><span style="color: #3399cc">.</span><span style="color: #cccccc">this_is_cool(</span><span style="color: #cd0000">:a</span><span style="color: #cccccc">,</span> <span style="color: #cd0000">:b</span><span style="color: #cccccc">,</span> <span style="color: #cd0000">:c</span><span style="color: #cccccc">)</span> <span style="color: #cccccc">{</span> <span style="color: #cd00cd">puts</span> <span style="color: #cd0000">&quot;a block&quot;</span> <span style="color: #cccccc">}</span> <span style="color: #75715e"># =&gt; You called: this_is_cool(a, b, c)</span>
                                                        <span style="color: #75715e"># =&gt; You also passed a block </span>
</pre></div>


<p><strong>5) Dynamic Proxy</strong><br/>
Wrapping an object or service and then forwarding method calls to the wrapped item is known as dynamic proxying.
In other word, Catching <code>Ghost Method</code> and forwarding them onto another method/service.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #cdcd00">def</span> <span style="color: #cccccc">method_missing(method_name,</span> <span style="color: #3399cc">*</span><span style="color: #cccccc">args,</span> <span style="color: #3399cc">&amp;</span><span style="color: #cccccc">block)</span>
  <span style="color: #cdcd00">return</span> <span style="color: #cccccc">get(</span><span style="color: #00cdcd">$1</span><span style="color: #3399cc">.</span><span style="color: #cccccc">to_sym,</span> <span style="color: #3399cc">*</span><span style="color: #cccccc">args,</span> <span style="color: #3399cc">&amp;</span><span style="color: #cccccc">block)</span> <span style="color: #cdcd00">if</span> <span style="color: #cccccc">method_name</span><span style="color: #3399cc">.</span><span style="color: #cccccc">to_s</span> <span style="color: #3399cc">=~</span> <span style="color: #cd0000">/^get_(.*)/</span>
  <span style="color: #cdcd00">super</span> <span style="color: #75715e"># if we don&#39;t find a match then we&#39;ll call the top level `BasicObject#method_missing`</span>
<span style="color: #cdcd00">end</span>
</pre></div>


<p>If we find a match for get_#{name} then we will delegate to another method such as get(:data_type) where :data_type is :name or :age(e.g. get_name, get_age etc) else send to super and raise error.</p>

<p><strong>6) Blank Slate</strong><br/>
Ruby allows us to remove functionality from a class. This technique can be useful to ensure that your class doesn’t expose unwanted or unexpected features.<br/>
e.g. Prevents issues when using &ldquo;Dynamic Proxy&rdquo;. User calls a method that exists higher up the inheritance chain so your <code>method_missing</code> doesn&rsquo;t fire because the method does exist. To work around this issue, make sure your class starts with a &ldquo;Blank Slate&rdquo;.<br/>
To remove method, use <code>Module#undef_method</code> (removes all the methods), or <code>Module#remove_method</code> (remove receiver&rsquo;s method, keep inherited methods). Ghost methods are slower than normal methods. Do not remove methods start with __, method_missing or respond_to?, and leave some other methods.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #75715e"># create a blank slate class</span>
<span style="color: #cdcd00">class</span> <span style="color: #00cdcd">ImBlank</span>
  <span style="color: #cd00cd">public_instance_methods</span><span style="color: #3399cc">.</span><span style="color: #cccccc">each</span> <span style="color: #cdcd00">do</span> <span style="color: #3399cc">|</span><span style="color: #cccccc">method_name</span><span style="color: #3399cc">|</span>
    <span style="color: #cccccc">undef_method(method_name)</span> <span style="color: #cdcd00">unless</span> <span style="color: #cccccc">method_name</span> <span style="color: #3399cc">=~</span> <span style="color: #cd0000">/^__|^(public_methods|method_missing|respond_to\?)$/</span>
  <span style="color: #cdcd00">end</span>
<span style="color: #cdcd00">end</span>

<span style="color: #75715e"># see what methods are now available</span>
<span style="color: #cccccc">ImBlank</span><span style="color: #3399cc">.</span><span style="color: #cccccc">new</span><span style="color: #3399cc">.</span><span style="color: #cccccc">public_methods</span> <span style="color: #75715e"># =&gt; [&quot;public_methods&quot;, &quot;__send__&quot;, &quot;respond_to?&quot;, &quot;__id__&quot;]</span>
</pre></div>


<p><strong>7) Kernel Method</strong><br/>
Defining methods in the Kernel module will make those methods available to all objects.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #cdcd00">module</span> <span style="color: #cccccc">Kernel</span>
  <span style="color: #cdcd00">def</span> <span style="color: #cccccc">say_hello</span>
    <span style="color: #cd00cd">puts</span> <span style="color: #cd0000">&quot;hello from #{</span><span style="color: #cd00cd">self</span><span style="color: #3399cc">.</span><span style="color: #cccccc">class</span><span style="color: #3399cc">.</span><span style="color: #cccccc">name</span><span style="color: #cd0000">}&quot;</span>
  <span style="color: #cdcd00">end</span>
<span style="color: #cdcd00">end</span>

<span style="color: #cccccc">Class</span><span style="color: #3399cc">.</span><span style="color: #cccccc">say_hello</span> <span style="color: #75715e"># =&gt; hello from Class</span>
<span style="color: #cccccc">Object</span><span style="color: #3399cc">.</span><span style="color: #cccccc">say_hello</span> <span style="color: #75715e"># =&gt; hello from Class</span>
<span style="color: #cccccc">Object</span><span style="color: #3399cc">.</span><span style="color: #cccccc">new</span><span style="color: #3399cc">.</span><span style="color: #cccccc">say_hello</span> <span style="color: #75715e"># =&gt; hello from Object</span>
<span style="color: #cd00cd">1</span><span style="color: #3399cc">.</span><span style="color: #cccccc">say_hello</span> <span style="color: #75715e"># =&gt; hello from Fixnum</span>
<span style="color: #cd0000">&quot;&quot;</span><span style="color: #3399cc">.</span><span style="color: #cccccc">say_hello</span> <span style="color: #75715e"># =&gt; hello from String</span>
</pre></div>


<p><strong>8) Scope</strong><br/>
Class.new is an alternative to class<br/>
<strong>Scope Gate:</strong><br/>
There are 3 ways to define a new scope in Ruby:</p>

<ul>
<li>starting new class definition, <code>class</code></li>
<li>starting new module definition, <code>module</code></li>
<li>start new method, <code>def</code></li>
</ul>


<p>Global variable can access any scope. Be aware that scoping in Ruby is different than some other languages. Ruby does not chain scopes when performing lookups, so don’t expect it to find variables defined in an outer scope.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #cccccc">scope</span> <span style="color: #3399cc">=</span> <span style="color: #cd0000">&quot;main scope&quot;</span>
<span style="color: #cd00cd">puts</span><span style="color: #cccccc">(scope)</span> <span style="color: #75715e"># =&gt; main scope</span>

<span style="color: #cdcd00">class</span> <span style="color: #00cdcd">ExampleClass</span>
  <span style="color: #75715e"># the main scoped variable isn&#39;t defined in the classes&#39; scope</span>
  <span style="color: #cccccc">defined?(scope)</span> <span style="color: #75715e"># =&gt; nil</span>
  <span style="color: #cccccc">scope</span> <span style="color: #3399cc">=</span> <span style="color: #cd0000">&quot;class scope&quot;</span>
  <span style="color: #cd00cd">puts</span><span style="color: #cccccc">(scope)</span> <span style="color: #75715e"># =&gt; class scope</span>
<span style="color: #cdcd00">end</span>
</pre></div>


<p><strong>Flattening the scope:</strong><br/>
Where you change the code in such a way that it&rsquo;s easier for you to pass variables through &ldquo;Scope Gates&rdquo;.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #cccccc">my_var</span> <span style="color: #3399cc">=</span> <span style="color: #cd0000">&quot;abc&quot;</span>
<span style="color: #cccccc">MyClass</span> <span style="color: #3399cc">=</span> <span style="color: #cccccc">Class</span><span style="color: #3399cc">.</span><span style="color: #cccccc">new</span> <span style="color: #cdcd00">do</span>
  <span style="color: #cd00cd">puts</span> <span style="color: #cd0000">&quot;#{</span><span style="color: #cccccc">my_var</span><span style="color: #cd0000">} in class&quot;</span>

  <span style="color: #cccccc">define_method</span> <span style="color: #cd0000">:my_method</span> <span style="color: #cdcd00">do</span>
    <span style="color: #cd00cd">puts</span> <span style="color: #cd0000">&quot;#{</span><span style="color: #cccccc">my_var</span><span style="color: #cd0000">} in method&quot;</span>
  <span style="color: #cdcd00">end</span>
<span style="color: #cdcd00">end</span> <span style="color: #75715e"># =&gt; abc in class</span>

<span style="color: #cccccc">MyClass</span><span style="color: #3399cc">.</span><span style="color: #cccccc">new</span><span style="color: #3399cc">.</span><span style="color: #cccccc">my_method</span> <span style="color: #75715e"># =&gt; abc in method</span>
</pre></div>


<p><strong>9) Eigenclass</strong><br/>
A hidden class on the ancestors chain. Eigenclass is a singleton class object. It stores the singleton method of an object.<br/>
<strong>Class Extension:</strong></p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #cdcd00">class</span> <span style="color: #00cdcd">MyClass</span>
  <span style="color: #cdcd00">class</span> <span style="color: #3399cc">&lt;&lt;</span> <span style="color: #cd00cd">self</span>
    <span style="color: #cdcd00">def</span> <span style="color: #cccccc">my_method;</span> <span style="color: #cd0000">&#39;hello&#39;</span><span style="color: #cccccc">;</span> <span style="color: #cdcd00">end</span>
  <span style="color: #cdcd00">end</span>
<span style="color: #cdcd00">end</span>

<span style="color: #cccccc">MyClass</span><span style="color: #3399cc">.</span><span style="color: #cccccc">my_method</span> <span style="color: #75715e"># =&gt; &quot;hello&quot;</span>
</pre></div>


<p><strong>Object Extension:</strong></p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #cdcd00">module</span> <span style="color: #cccccc">MyModule</span>
  <span style="color: #cdcd00">def</span> <span style="color: #cccccc">my_method;</span> <span style="color: #cd0000">&#39;hello&#39;</span><span style="color: #cccccc">;</span> <span style="color: #cdcd00">end</span>
<span style="color: #cdcd00">end</span>

<span style="color: #cccccc">obj</span> <span style="color: #3399cc">=</span> <span style="color: #cccccc">Object</span><span style="color: #3399cc">.</span><span style="color: #cccccc">new</span>
<span style="color: #cdcd00">class</span> <span style="color: #3399cc">&lt;&lt;</span> <span style="color: #cccccc">obj</span> <span style="color: #75715e"># extends obj</span>
  <span style="color: #cdcd00">include</span> <span style="color: #cccccc">MyModule</span>
<span style="color: #cdcd00">end</span>

<span style="color: #cccccc">obj</span><span style="color: #3399cc">.</span><span style="color: #cccccc">my_method</span> <span style="color: #75715e"># =&gt; &quot;hello&quot;</span>
<span style="color: #cccccc">obj</span><span style="color: #3399cc">.</span><span style="color: #cccccc">singleton_methods</span> <span style="color: #75715e"># =&gt; [:my_method]</span>

<span style="color: #75715e"># Another way to extend object</span>

<span style="color: #cccccc">obj</span> <span style="color: #3399cc">=</span> <span style="color: #cccccc">Object</span><span style="color: #3399cc">.</span><span style="color: #cccccc">new</span>
<span style="color: #cccccc">obj</span><span style="color: #3399cc">.</span><span style="color: #cccccc">extend</span> <span style="color: #cccccc">MyModule</span>
<span style="color: #cccccc">obj</span><span style="color: #3399cc">.</span><span style="color: #cccccc">my_method</span> <span style="color: #75715e"># =&gt; &quot;hello&quot;</span>
</pre></div>


<p><strong>10) Context Probe</strong><br/>
Execute a code block in the context of another object using <code>instance_eval</code></p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #cdcd00">class</span> <span style="color: #00cdcd">Foo</span>
  <span style="color: #cdcd00">def</span> <span style="color: #cccccc">initialize</span>
    <span style="color: #00cdcd">@z</span> <span style="color: #3399cc">=</span> <span style="color: #cd00cd">1</span>
  <span style="color: #cdcd00">end</span>
<span style="color: #cdcd00">end</span>
<span style="color: #cccccc">foo</span> <span style="color: #3399cc">=</span> <span style="color: #cccccc">Foo</span><span style="color: #3399cc">.</span><span style="color: #cccccc">new</span>
<span style="color: #cccccc">foo</span><span style="color: #3399cc">.</span><span style="color: #cccccc">instance_eval</span> <span style="color: #cdcd00">do</span>
  <span style="color: #00cdcd">@z</span> <span style="color: #3399cc">=</span> <span style="color: #cd00cd">2</span>
  <span style="color: #cd00cd">puts</span> <span style="color: #00cdcd">@z</span> <span style="color: #75715e"># =&gt; 2</span>
<span style="color: #cdcd00">end</span>

<span style="color: #75715e"># There is also `instance_exec` which works the same way but allows passing arguments to the block</span>
<span style="color: #cccccc">Foo</span><span style="color: #3399cc">.</span><span style="color: #cccccc">new</span><span style="color: #3399cc">.</span><span style="color: #cccccc">instance_exec(</span><span style="color: #cd00cd">3</span><span style="color: #cccccc">)</span> <span style="color: #cccccc">{</span> <span style="color: #3399cc">|</span><span style="color: #cccccc">arg</span><span style="color: #3399cc">|</span> <span style="color: #00cdcd">@z</span> <span style="color: #3399cc">*</span> <span style="color: #cccccc">arg</span> <span style="color: #cccccc">}</span> <span style="color: #75715e"># =&gt; 3</span>
</pre></div>


<p><strong>11) Clean Room</strong><br/>
Clean rooms are used to change the current context to something expected or clean (does not affect to current environment).</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #cdcd00">def</span> <span style="color: #cccccc">do_stuff</span>
  <span style="color: #00cdcd">@scope</span>
<span style="color: #cdcd00">end</span>

<span style="color: #00cdcd">@scope</span> <span style="color: #3399cc">=</span> <span style="color: #cd0000">&quot;outer scope&quot;</span>
<span style="color: #cd00cd">puts</span> <span style="color: #cccccc">do_stuff</span> <span style="color: #75715e"># =&gt; outer scope</span>

<span style="color: #cccccc">Object</span><span style="color: #3399cc">.</span><span style="color: #cccccc">new</span><span style="color: #3399cc">.</span><span style="color: #cccccc">instance_eval</span> <span style="color: #cdcd00">do</span>
  <span style="color: #00cdcd">@scope</span> <span style="color: #3399cc">=</span> <span style="color: #cd0000">&quot;clean room scope&quot;</span>
  <span style="color: #cd00cd">puts</span> <span style="color: #cccccc">do_stuff</span> <span style="color: #75715e"># =&gt; clean room scope</span>
<span style="color: #cdcd00">end</span>
</pre></div>


<p><strong>12) class_eval</strong><br/>
Evaluate a block in the context of a class. Similar to re-opening a class but more flexible in that it works on any variable that references a class, where as re-opening a class requires defining a constant.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #cdcd00">def</span> <span style="color: #cccccc">add_method_to(a_class)</span>
  <span style="color: #cccccc">a_class</span><span style="color: #3399cc">.</span><span style="color: #cccccc">class_eval</span> <span style="color: #cdcd00">do</span>
    <span style="color: #cdcd00">def</span> <span style="color: #cccccc">m;</span> <span style="color: #cd0000">&#39;Hello!&#39;</span><span style="color: #cccccc">;</span> <span style="color: #cdcd00">end</span>
  <span style="color: #cdcd00">end</span>
<span style="color: #cdcd00">end</span>

<span style="color: #cccccc">add_method_to</span> <span style="color: #cd00cd">String</span>
<span style="color: #cd0000">&#39;abc&#39;</span><span style="color: #3399cc">.</span><span style="color: #cccccc">m</span> <span style="color: #75715e"># =&gt; &quot;Hello!&quot;</span>
</pre></div>


<p><strong>13) Class Macro</strong><br/>
Class Macros are just regular class methods that are only used in a class definition.<br/>
e.g. <code>attr_accessor</code>, <code>attr_reader</code>. These are class macros.</p>

<br/>Write your own class macro. Here is an example of deprecate old methods, print warning message when being called.


<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #cdcd00">class</span> <span style="color: #00cdcd">Book</span>
  <span style="color: #cdcd00">def</span> <span style="color: #00cdcd">self</span><span style="color: #3399cc">.</span><span style="color: #cccccc">title;</span> <span style="color: #cd00cd">puts</span> <span style="color: #cd0000">&quot;I&#39;m an A&quot;</span> <span style="color: #cdcd00">end</span>

  <span style="color: #cdcd00">def</span> <span style="color: #00cdcd">self</span><span style="color: #3399cc">.</span><span style="color: #cccccc">deprecate(old_method,</span> <span style="color: #cccccc">new_method)</span>
    <span style="color: #cd00cd">warn</span> <span style="color: #cd0000">&quot;Warning: #{</span><span style="color: #cccccc">old_method</span><span style="color: #cd0000">}() is deprecated. Use #{</span><span style="color: #cccccc">new_method</span><span style="color: #cd0000">}()&quot;</span>
    <span style="color: #cd00cd">send</span><span style="color: #cccccc">(new_method)</span>
  <span style="color: #cdcd00">end</span>

  <span style="color: #cccccc">deprecate</span> <span style="color: #cd0000">:GetTitle</span><span style="color: #cccccc">,</span> <span style="color: #cd0000">:title</span>
<span style="color: #cdcd00">end</span>
</pre></div>


<p><strong>14) Around Alias</strong><br/>
Around Alias uses the <code>alias</code> keyword to store a copy of the original method under a new name, allowing you to redefine the original method name and to delegate off to the previous method implementation.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #cdcd00">class</span> <span style="color: #00cdcd">String</span>
  <span style="color: #cdcd00">alias</span> <span style="color: #cd0000">:orig_length</span> <span style="color: #cd0000">:length</span> <span style="color: #75715e"># make alias of old method</span>

  <span style="color: #cdcd00">def</span> <span style="color: #cccccc">length</span> <span style="color: #75715e"># define new method, override</span>
    <span style="color: #cd0000">&quot;Length of string &#39;#{</span><span style="color: #cd00cd">self</span><span style="color: #cd0000">}&#39; is: #{</span><span style="color: #cccccc">orig_length</span><span style="color: #cd0000">}&quot;</span>
  <span style="color: #cdcd00">end</span>
<span style="color: #cdcd00">end</span>

<span style="color: #cd0000">&quot;abc&quot;</span><span style="color: #3399cc">.</span><span style="color: #cccccc">length</span> <span style="color: #75715e">#=&gt; &quot;Length of string &#39;abc&#39; is: 3&quot;</span>
</pre></div>


<p><strong>15) Hook Methods</strong><br/>
The method being called when event triggered, like <code>Module#included</code>, <code>Class#inherited</code></p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #cdcd00">class</span> <span style="color: #00cdcd">String</span>
  <span style="color: #cdcd00">def</span> <span style="color: #00cdcd">self</span><span style="color: #3399cc">.</span><span style="color: #cccccc">inherited(subclass)</span>
    <span style="color: #cd00cd">puts</span> <span style="color: #cd0000">&quot;#{</span><span style="color: #cd00cd">self</span><span style="color: #cd0000">} was inherited by #{</span><span style="color: #cccccc">subclass</span><span style="color: #cd0000">}&quot;</span>
  <span style="color: #cdcd00">end</span>
<span style="color: #cdcd00">end</span>
<span style="color: #cdcd00">class</span> <span style="color: #00cdcd">MyString</span> <span style="color: #3399cc">&lt;</span> <span style="color: #cd00cd">String</span><span style="color: #cccccc">;</span> <span style="color: #cdcd00">end</span> <span style="color: #75715e"># =&gt; String was inherited by MyString</span>
</pre></div>


<p><strong>Method-related hooks:</strong></p>

<ul>
<li>method_missing</li>
<li>method_added</li>
<li>method_removed</li>
<li>method_undefined</li>
<li>singleton_method_added</li>
<li>singleton_method_removed</li>
<li>singleton_method_undefined</li>
</ul>


<p><strong>Class &amp; Module hooks:</strong></p>

<ul>
<li>inherited</li>
<li>included</li>
<li>extended</li>
<li>extend_object</li>
<li>const_missing</li>
<li>append_features</li>
<li>initialize_copy</li>
</ul>


<p><strong>Marshalling hooks:</strong></p>

<ul>
<li>marshal_dump</li>
<li>marshal_load</li>
</ul>


<p><strong>16) Class Extension Mixin</strong><br/>
Class Extension Mixin allows you to both <code>include</code> and <code>extend</code> a class</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: #000000; border: 0;"><span style="color: #cdcd00">module</span> <span style="color: #cccccc">MyMixin</span>
  <span style="color: #cdcd00">def</span> <span style="color: #00cdcd">self</span><span style="color: #3399cc">.</span><span style="color: #cccccc">included(base)</span> <span style="color: #75715e"># Hook Method</span>
    <span style="color: #cccccc">base</span><span style="color: #3399cc">.</span><span style="color: #cccccc">extend</span> <span style="color: #cccccc">ClassMethods</span>
  <span style="color: #cdcd00">end</span>

  <span style="color: #75715e"># Class Methods</span>
  <span style="color: #cdcd00">module</span> <span style="color: #cccccc">ClassMethods</span>
    <span style="color: #cdcd00">def</span> <span style="color: #cccccc">x</span>
      <span style="color: #cd00cd">puts</span> <span style="color: #cd0000">&quot;I&#39;m X (a class method)&quot;</span>
    <span style="color: #cdcd00">end</span>
  <span style="color: #cdcd00">end</span>

  <span style="color: #75715e"># Instance Methods</span>
  <span style="color: #cdcd00">def</span> <span style="color: #cccccc">a</span>
    <span style="color: #cd00cd">puts</span> <span style="color: #cd0000">&quot;I&#39;m A (an instance method)&quot;</span>
  <span style="color: #cdcd00">end</span>
<span style="color: #cdcd00">end</span>

<span style="color: #cdcd00">class</span> <span style="color: #00cdcd">Foo</span>
  <span style="color: #cdcd00">include</span> <span style="color: #cccccc">MyMixin</span>
<span style="color: #cdcd00">end</span>

<span style="color: #cccccc">Foo</span><span style="color: #3399cc">.</span><span style="color: #cccccc">x</span> <span style="color: #75715e"># =&gt; I&#39;m X (a class method)</span>
<span style="color: #cccccc">Foo</span><span style="color: #3399cc">.</span><span style="color: #cccccc">new</span><span style="color: #3399cc">.</span><span style="color: #cccccc">a</span> <span style="color: #75715e"># =&gt; I&#39;m A (an instance method)</span>
</pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails#send_file + Nginx X-Accel-Redirect]]></title>
    <link href="http://ranjithkumar.github.io/blog/2014/09/10/rails-number-send-file-plus-nginx-x-accel-redirect/"/>
    <updated>2014-09-10T16:13:33+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2014/09/10/rails-number-send-file-plus-nginx-x-accel-redirect</id>
    <content type="html"><![CDATA[<p>Sometimes you may need to serve some static files (CSV, PDF, XLS etc) to your users, but only after they have logged in. Obviously you can’t just keep the static file in your public folder as anyone could just use the URL to download files.</p>

<p>One possible solution for protected downloads is to just use the #send_file method provided by Rack to send a non-public file to the user, but serving static files with your app server (Unicorn, Mongrel, Thin etc) is a bad idea as it’s really inefficient. The best approach is to allow the app server to handle the authentication/authorization and then hand the actual downloading to your web server (Nginx, Apache, Lighttpd etc).</p>

<!--more-->


<p>In Lighttpd server it can be done by returning X-Sendfile header from your script. Nginx have its own implementation of such idea using X-Accel-Redirect header.</p>

<p><strong>The need for X-Accel-Redirect:</strong></p>

<ul>
<li>To deliver large files.</li>
<li>For those files to not be available to the public</li>
<li>Would be able to free some resources on server while nginx will handle all slow requests to dynamic content</li>
</ul>


<p>In this article I will assume that the site is located in <em>/home/kranjith/sites/projects/blog</em> directory and there are some static files (like CSV, PDF, XLS etc) located in <em>/home/kranjith/sites/projects/blog/uploads</em> directory.</p>

<p>First of all, lets take a look at our nginx configuration:</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># Nginx X-Accel-Redirect configuration for Rails and Unicorn </span>
<span style="color: white">upstream unicorn_blog_server {</span>
    <span style="color: white">server unix:/home/kranjith/sites/projects/blog/tmp/sockets/unicorn.sock</span>
    <span style="color: white">fail_timeout=0;</span>
<span style="color: white">}</span>

<span style="color: white">server {</span>
    <span style="color: white">listen       80;</span>
    <span style="color: white">server_name  example.org;</span>
 
    <span style="color: white">root /home/kranjith/sites/projects/blog/public;</span>
    
    <span style="color: white">location /downloads {</span>
      <span style="color: white">internal;</span>
      <span style="color: white">alias /home/kranjith/sites/projects/blog/uploads;</span>
    <span style="color: white">}</span>
    
    <span style="color: white">location / {</span>
       <span style="color: white">try_files $uri @blog;</span>
    <span style="color: white">}</span>

    <span style="color: white">location @blog {</span>
      <span style="color: white">proxy_redirect    off;</span>
      
      <span style="color: white">proxy_set_header  Host              $http_host;</span>
      <span style="color: white">proxy_set_header  X-Real-IP         $remote_addr;</span>
      <span style="color: white">proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;</span>
 
      <span style="color: white">proxy_set_header  X-Sendfile-Type   X-Accel-Redirect;</span>
      <span style="color: white">proxy_set_header  X-Accel-Mapping   /home/kranjith/sites/projects/blog/uploads/=/downloads/;</span>
      
      <span style="color: white">proxy_pass http://unicorn_blog_server;</span>
    <span style="color: white">}</span>
<span style="color: white">}</span>
</pre></div>


<p><strong>The internal keyword for the /downloads location prevents the uploads folder from being publicly accessible</strong>.</p>

<p>Next you need to ensure that Rails knows what server you are using</p>

<p>In <em>config/environments/production.rb</em> file.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># Specifies the header that your server uses for sending files.</span>
<span style="color: #f8f8f2">config</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">action_dispatch</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">x_sendfile_header</span> <span style="color: #f92672">=</span> <span style="color: #e6db74">&#39;X-Accel-Redirect&#39;</span> <span style="color: #75715e"># for nginx</span>
</pre>
</div>


<p>In <em>DownloadsController</em>, just do whatever authorization you need to, then use #send_file to serve the file to the user:</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #66d9ef">class</span> <span style="color: #a6e22e">DownloadsController</span> <span style="color: #f92672">&lt;</span> <span style="color: #66d9ef">ApplicationController</span>
  <span style="color: #f8f8f2">load_and_authorize_resource</span>

  <span style="color: #66d9ef">def</span> <span style="color: #a6e22e">show</span>
    <span style="color: #f8f8f2">send_file(</span> <span style="color: #66d9ef">Rails</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">root</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">to_s</span> <span style="color: #f92672">+</span> <span style="color: #f8f8f2">@uploaded_file</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">file</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">url,</span> <span style="color: #e6db74">type</span><span style="color: #f8f8f2">:</span> <span style="color: #f8f8f2">@uploaded_file</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">content_type,</span> <span style="color: #e6db74">filename</span><span style="color: #f8f8f2">:</span> <span style="color: #f8f8f2">@uploaded_file</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">filename,</span> <span style="color: #e6db74">dispostion</span><span style="color: #f8f8f2">:</span> <span style="color: #e6db74">&quot;inline&quot;</span><span style="color: #f8f8f2">,</span> <span style="color: #e6db74">status</span><span style="color: #f8f8f2">:</span> <span style="color: #ae81ff">200</span><span style="color: #f8f8f2">,</span> <span style="color: #e6db74">stream</span><span style="color: #f8f8f2">:</span> <span style="color: #66d9ef">true</span><span style="color: #f8f8f2">,</span> <span style="color: #f8f8f2">x_sendfile:</span> <span style="color: #66d9ef">true</span> <span style="color: #f8f8f2">)</span>   
  <span style="color: #66d9ef">end</span>   
<span style="color: #66d9ef">end</span>
</pre></div>


<p>I am using CarrierWave to upload files from Rails applications. In <em>config/initializers/carrierwave.rb</em></p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #66d9ef">CarrierWave</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">configure</span> <span style="color: #66d9ef">do</span> <span style="color: #f92672">|</span><span style="color: #f8f8f2">config</span><span style="color: #f92672">|</span>
  <span style="color: #f8f8f2">config</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">storage</span> <span style="color: #f92672">=</span> <span style="color: #e6db74">:file</span>
  <span style="color: #f8f8f2">config</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">root</span> <span style="color: #f92672">=</span> <span style="color: #66d9ef">Rails</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">root</span>
  <span style="color: #f8f8f2">config</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">store_dir</span> <span style="color: #f92672">=</span> <span style="color: #e6db74">&quot;uploads&quot;</span>
<span style="color: #66d9ef">end</span>
</pre></div>


<p>And that’s it! <strong>With described approach we are able to create very flexible and extremely performance systems for file distribution!</strong></p>

<p>Now I’m going to run through a specific example of downloading a file.</p>

<p>1.Browser makes a request for a file</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># HTTP Headers</span>
<span style="color: white">GET /downloads/SecretSquirrel.zip</span>
</pre></div>


<p>2.Nginx receives this request. It adds on a header with configuration data that will be required by rails.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># Example HTTP Headers with additional header added by nginx</span>
<span style="color: white">GET /downloads/SecretSquirrel.zip</span>
<span style="color: white">X-Accel-Mapping</span><span style="color: #f8f8f2">:</span>   <span style="color: white">/home/kranjith/sites/projects/blog/uploads/=/downloads/</span>
</pre></div>


<p>3.Nginx passes the request onto Rails and it invokes the relevant controller.</p>

<p>4.The controller makes its authorization checks and calls send_file. Use the absolute path to the file.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># controller code (e.g. app/controllers/downloads_controller.rb)</span>
<span style="color: white">send_file(&#39;/home/kranjith/sites/projects/blog/uploads/SecretSquirrel.zip&#39;)</span>
</pre></div>


<p>5.Rails (Rack to be precise) then decides what to with the file. Rails knows what server we are using (from <em>config/environments/production.rb</em>). Instead of using the file as the body of the request, it will add a header to the response. It uses the X-Accel-Mapping that nginx added earlier to change the file path.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># HTTP Response</span>
<span style="color: white">HTTP/1.1 200 OK</span>
<span style="color: white">X-Accel-Redirect</span><span style="color: #f8f8f2">:</span> <span style="color: white">/downloads/SecretSquirrel.zip</span>
<span style="color: white">Content-Type</span><span style="color: #f8f8f2">:</span> <span style="color: white">application/octet-stream</span>
<span style="color: white">Content-length</span><span style="color: #f8f8f2">:</span> <span style="color: white">...</span>
<span style="color: white">Content-Disposition</span><span style="color: #f8f8f2">:</span> <span style="color: white">attachment; filename=&quot;SecretSquirrel.zip&quot;</span>
<span style="color: white">&lt;empty body&gt;</span>
</pre></div>


<p>6.Nginx receives this header from rails and interprets it. It finds the location directive and reverses the changes to the path that rails made in step 5.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># HTTP Response</span>
<span style="color: white">HTTP/1.1 200 OK</span>
<span style="color: white">Content-Type</span><span style="color: #f8f8f2">:</span> <span style="color: white">application/octet-stream</span>
<span style="color: white">Content-Length</span><span style="color: #f8f8f2">:</span> <span style="color: white">...</span>
<span style="color: white">Content-Disposition</span><span style="color: #f8f8f2">:</span> <span style="color: white">attachment; filename=&quot;SecretSquirrel.zip&quot;</span>
<span style="color: white">&lt;contents of /home/kranjith/sites/projects/blog/uploads/SecretSquirrel.zip&gt;</span>
</pre></div>


<p>7.Browser receives the file as if it was a normal download.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveResource Custom Method Calls &amp; Responses]]></title>
    <link href="http://ranjithkumar.github.io/blog/2014/07/03/activeresource-custom-method-calls-and-responses/"/>
    <updated>2014-07-03T10:52:35+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2014/07/03/activeresource-custom-method-calls-and-responses</id>
    <content type="html"><![CDATA[<p>Active Resource supports defining our own custom REST methods. A custom method call is one that is not one of the default CRUD actions that you get out of the box with RESTful routing.</p>

<p>To invoke them, Active Resource provides the get, post, put and delete methods where you can specify a custom REST method name to invoke.</p>

<!--more-->


<p><strong>Here one thing to note is that, all custom method calls return the remote service response except &lsquo;get&rsquo;. &lsquo;get&rsquo; returns a hash (or array of hashes).</strong></p>

<pre><code># GET all managers(collection custom method), i.e. GET /people/managers.json
Person.get(:managers)
#=&gt; [{:name =&gt; "Rans"}, {:name =&gt; "Gokul"}]
</code></pre>

<p><strong>If you want to get actual objects from a get call, you can use the find method.</strong></p>

<pre><code># GET all managers(collection custom method), i.e. GET /people/managers.json
Person.find(:all, from: :managers)
#=&gt; &lt;#Person...&gt;&lt;#Person ...&gt;
</code></pre>

<p>Options :from &ndash; Sets the path or custom method that resources will be fetched from.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Form builder object on AJAX callback]]></title>
    <link href="http://ranjithkumar.github.io/blog/2014/04/18/form-builder-object-on-ajax-callback/"/>
    <updated>2014-04-18T16:23:06+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2014/04/18/form-builder-object-on-ajax-callback</id>
    <content type="html"><![CDATA[<p><strong>Problem:</strong></p>

<p>My application has a select box for users to choose a &ldquo;mapping&rdquo; for the upload. Based on mapping, user should see the default options selected in that form. When user changes the mapping, an AJAX request gets called and renders a js.erb file. The rendered js should render a partial that has fields_for a nested model. My challenge is, How to pass the form build object to the partial on AJAX callback?</p>

<!--more-->


<p><em>upload_page.html.erb:</em></p>

<pre><code>&lt;%= form_for :upload do |f| %&gt;
  Some divs....

  &lt;div&gt;
    &lt;label&gt;Mapping: &lt;/label&gt;
    &lt;%= f.select :mapping_id, options_from_collection_for_select(@mappings, "id"
    , "name"), {}, { class: "default_mapping_change" } %&gt;
  &lt;/div&gt;

  &lt;div id="mapping_option"&gt;
        &lt;%= render "mapping_option_form", f: f, default_mapping: @mapping %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code></pre>

<p>On my ajax callback, I replace &ldquo;mapping_option&rdquo; div with the update object.</p>

<p><strong>Solution:</strong></p>

<p>Create a new form in the js.erb file and passing that one to the partial.</p>

<p><em>default_mapping_change.js.erb:</em></p>

<pre><code>'&lt;%= form_for :upload do |f| %&gt;'
    $("#mapping_option").html("&lt;%= j(render "mapping_option_form", f: f,
    default_mapping: @mapping) %&gt;");
'&lt;% end %&gt;'
</code></pre>

<p><strong>The single quotes around the form tag are important, or else there will be some javascript escaping issue.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sidekiq configuration for SOA / multiple environments on same server]]></title>
    <link href="http://ranjithkumar.github.io/blog/2014/03/04/sidekiq-configuration-for-soa-multiple-environments-on-same-server/"/>
    <updated>2014-03-04T11:37:56+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2014/03/04/sidekiq-configuration-for-soa-multiple-environments-on-same-server</id>
    <content type="html"><![CDATA[<p>The Sidekiq configuration file by default located at <em>config/sidekiq.yml</em>. It is only necessary to create the file if you need to set advanced options, such as concurrency pool size, named queues, PID file location, etc.</p>

<!--more-->


<p>Here is an example configuration file:</p>

<pre><code>:concurrency: 5
:pidfile: tmp/pids/sidekiq.pid
staging:
 :concurrency: 10
production:
 :concurrency: 50
:queues:
 - default
</code></pre>

<p>By default, one Sidekiq process will be started on each app server.</p>

<p><strong>Setting the Location of your Redis server</strong></p>

<p>By default, Redis is located at <em>localhost:6379</em>.</p>

<p>Following is my development environment,
<em>SOA + Ruby(2.0) + Rails(4.0) + Unicorn  + Nginx  + SideKiq + MultiTenant</em></p>

<p>In your <em>config/initializers/sidekiq.rb</em> file,</p>

<pre><code>Sidekiq.configure_server do |config|
  config.redis = { url: 'redis://localhost:6379/0', namespace: "sidekiq_app_name_#{Rails.env}" }
end

Sidekiq.configure_client do |config|
  config.redis = { url: 'redis://localhost:6379/0', namespace: "sidekiq_app_name_#{Rails.env}" }
end
</code></pre>

<p>Usage:
<em>The :namespace parameter is recommended if Sidekiq is sharing access to a Redis database.</em></p>

<p>Finally, start sidekiq from the root directory of your Rails app.</p>

<blockquote>bundle exec sidekiq -e staging -C config/sidekiq.yml</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Shortcut Commands & Colored Output]]></title>
    <link href="http://ranjithkumar.github.io/blog/2013/12/09/git-shortcut-commands/"/>
    <updated>2013-12-09T17:20:15+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2013/12/09/git-shortcut-commands</id>
    <content type="html"><![CDATA[<p>Helpful git command aliases with colored output</p>

<!--more-->




<div><script src='https://gist.github.com/9527081.js'></script>
<noscript><pre><code>Add these lines into ~/.gitconfig file.

---------------------------------------------------------------------

[alias]
        st = status
        sh = show
        ft = fetch
        ci = commit
        cm = commit -m
        br = branch
        rb = branch -d
        co = checkout
        nb = checkout -b
        df = diff
        pl = pull --rebase 
        ps = push
        lg = log -p
        rv = revert
        cp = cherry-pick
        ecm = commit --amend
    uns = reset HEAD
        fps = push -u
        rbc = rebase --continue
        undo = reset --hard

[color]
  ui = auto
[color &quot;branch&quot;]
  current = yellow reverse
  local = yellow
  remote = green
[color &quot;diff&quot;]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color &quot;status&quot;]
  added = green
  changed = red
  untracked = cyan

[format]
        pretty = &quot;Commit:  %C(yellow)%H%nAuthor:  %C(green)%aN &lt;%aE&gt;%nDate:    (%C(red)%ar%Creset) %ai%nSubject: %s%n%n%b&quot;

---------------------------------------------------------------------

For more information, check here
1) https://thomashunter.name/blog/git-colored-output-shortcut-commands-autocompletion-and-bash-prompt/
2) http://gitready.com/intermediate/2009/02/06/helpful-command-aliases.html</code></pre></noscript></div>


<p><strong>Sample output(on terminal):</strong></p>

<div>
<img src="http://ranjithkumar.github.io/images/git-colored-output.png">
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Color My Prompt]]></title>
    <link href="http://ranjithkumar.github.io/blog/2013/10/17/color-my-prompt/"/>
    <updated>2013-10-17T10:54:38+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2013/10/17/color-my-prompt</id>
    <content type="html"><![CDATA[<p>If you wanna make your prompt colorful with Git branch name / Ruby version</p>

<!--more-->




<div><script src='https://gist.github.com/9526665.js'></script>
<noscript><pre><code>function color_my_prompt {
    local __user_and_host=&quot;\[\033[01;32m\]\u@\h&quot;
    local __cur_location=&quot;\[\033[01;34m\]\w&quot;
    local __git_branch_color=&quot;\[\033[31m\]&quot;
    local __ruby_color=&quot;\[\033[35m\]&quot;
    local __ruby_version=&#39;`ruby -v | sed -E  s/^\\\\\*\ \(.+\)$/\(\\\\\1\)\ /`&#39;
    local __git_branch=&#39;`git branch 2&gt; /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\(\\\\\1\)\ /`&#39;
    local __prompt_tail=&quot;\[\033[01;34m\]$&quot;
    local __last_color=&quot;\[\033[00m\]&quot;
    #export PS1=&quot;$__user_and_host $__cur_location $__ruby_color$__ruby_version $__prompt_tail$__last_color &quot;
    export PS1=&quot;$__user_and_host $__cur_location $__git_branch_color$__git_branch$__prompt_tail$__last_color &quot;
}

color_my_prompt

------------------------------------------------------
In ~/.bashrc, Add above lines into bottom of the file. 

</code></pre></noscript></div>


<p><strong>Sample output(on terminal):</strong></p>

<blockquote><p><div><span style="color:green">ranjith@ranjith </span><span style="color:blue">~/Blog/octopress </span><span style="color:red">(source) </span><span style="color:blue">$</span></div></p></blockquote>


<p>Here,</p>

<pre><code>ranjith@ranjith   =&gt; User name and Host name
~/Blog/octopress  =&gt; Working directory name
source            =&gt; Git branch name
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Master-Slave Replication]]></title>
    <link href="http://ranjithkumar.github.io/blog/2012/07/21/mysql-master-slave-replication/"/>
    <updated>2012-07-21T15:21:34+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2012/07/21/mysql-master-slave-replication</id>
    <content type="html"><![CDATA[<p><strong>The advantages of replication:&ndash;</strong>
1) Offload some queries from one server to other.
2) Use master for all writes and Use slave for all reads.</p>

<p><strong>Some basic stuff to remember before we go ahead:&ndash;</strong>
1. Master and slave installations will be on different server instances.
2. The master should not be in use during the installation process (if master is already present).</p>

<!--more-->


<p><strong>1) Setup Master server:&ndash;</strong></p>

<pre><code>   install MySQL Server
   sudo apt-get install mysql-server
</code></pre>

<p>after installation, Configure it to make this as Master server.</p>

<p>Edit</p>

<pre><code>   /etc/mysql/my.cnf
</code></pre>

<p>MySQL should listen to all IP Addresses, so we comment out the following lines:</p>

<pre><code>   #skip-networking
   #bind-address = 127.0.0.1
</code></pre>

<p>Set unique server ID</p>

<pre><code>   server-id=1
</code></pre>

<p>Enable binary logging</p>

<pre><code>   log-bin = /var/log/mysql/mysql-bin.log
</code></pre>

<p>Restart MySQL by using the command</p>

<pre><code>   sudo service mysql restart
</code></pre>

<p>Log in to the MySQL shell</p>

<pre><code>   mysql -u root -p
</code></pre>

<p><strong>Create a replication user:</strong>
Its recommended to create a separate user for mysql replication to which slaves can authenticate.  Slaves will be connecting to the master using this user’s credentials.</p>

<pre><code>   GRANT REPLICATION SLAVE ON *.* TO 'slaveuser'@'%' IDENTIFIED BY   
 '&lt;a_real_password&gt;';
   FLUSH PRIVILEGES;
   FLUSH TABLES WITH READ LOCK;
   SHOW MASTER STATUS;
</code></pre>

<p>After running the above command, you should be able to see binary log position</p>

<pre><code>  +------------------+----------+--------------+------------------+
   | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
   +------------------+----------+--------------+------------------+
   | mysql-bin.000001 |      107 |              |                  |
   +------------------+----------+--------------+------------------+
</code></pre>

<p>Write down the position, this would be needed later.</p>

<p>Note: If you already have a master setup with data, dump the data so that it can be imported to the slave for the data to be in sync.</p>

<p>Leave the shell.</p>

<pre><code>   quit;
</code></pre>

<p><strong>2) Setup Slave server:&ndash;</strong></p>

<pre><code>   install MySQL Server
   sudo apt-get install mysql-server
</code></pre>

<p>after installation, Configure it to make this as slave server.</p>

<p>Edit</p>

<pre><code>   /etc/mysql/my.cnf
</code></pre>

<p>Set unique server ID</p>

<pre><code>   Server-id=2
</code></pre>

<p>Restart MySQL by using the command</p>

<pre><code>   sudo service mysql restart
</code></pre>

<p>Use below command to load the initial data from master</p>

<pre><code>   mysql -u root -p&lt;password&gt; database_name &lt; /path/to/masterdump.sql
</code></pre>

<p>Log in to the MySQL shell</p>

<pre><code>   mysql -u root -p
</code></pre>

<p>We need to inform our slave server the details of master server like host name, replication username and password, etc. Other things that slave server need is master log file name and log position, which we have obtained by entering show master status on master server. Now we can connect slave with the master by issuing the following command</p>

<pre><code>   CHANGE MASTER TO MASTER_HOST = '&lt;host_name&gt;', MASTER_USER ='slaveuser', 
 MASTER_PASSWORD='&lt;a_real_password&gt;', MASTER_LOG_FILE = 'mysql-bin.000001', 
MASTER_LOG_POS =107;
</code></pre>

<p>Finally, start the slave</p>

<pre><code>   START SLAVE;
   SHOW SLAVE STATUS\G; 
   quit;
</code></pre>

<p>Now in the master host run the following command to release the lock</p>

<pre><code>   mysql&gt; UNLOCK TABLES;
</code></pre>

<p>And now, each write to the master gets instantly replicated on the slave as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to make your application work for both MySQL and PostgreSQL?]]></title>
    <link href="http://ranjithkumar.github.io/blog/2011/07/25/how-to-make-your-application-work-for-both-mysql-and-postgresql/"/>
    <updated>2011-07-25T15:45:40+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2011/07/25/how-to-make-your-application-work-for-both-mysql-and-postgresql</id>
    <content type="html"><![CDATA[<p>I am using rails 3 and ruby 1.9.2 in my application.
For development environment, I am using MySQL and for staging environment, I am using PostgreSQL Database.<br/>
After hosting, we have faced some issues.</p>

<!--more-->


<p><strong>1) Quoting styles:</strong>
  MySQL allows you to quote table and column names with backquotes, whereas PostgreSQL uses double quotes.
  For ex:
  One of our tables has a column in it called when, which must be quoted whenever we use it.
  Rails will of course handle the quoting for you if you do something like</p>

<pre><code>Meeting.find_by_when(Time.now)
</code></pre>

<p>  But if you are constructing your own SQL conditions then you have to handle the quoting problem.</p>

<p>  In MySQL, it would be like</p>

<pre><code>Meeting.where("`when` &lt; ?", Time.now)
</code></pre>

<p>  In PostgreSQL, it would be like</p>

<pre><code>Meeting.where("\"when\" &lt; ?", Time.now)
</code></pre>

<p>  Solution:</p>

<pre><code>Meeting.where("#{Meeting.connection.quote_column_name(when)} &lt; ?", Time.now)
</code></pre>

<p><strong>2) Boolean type:</strong>
  MySQL lacks a native BOOLEAN type, so if you create a boolean column in Rails, you will end up with a TINYINT(1) column which has values of 0 and 1 for false and true respectively. PostgreSQL has a native BOOLEAN type, it will accept only false/true unlike MySQL.</p>

<p>  In MySQL, it would be like</p>

<pre><code>Meeting.where("import=1") OR Meeting.where("import=?", true)
</code></pre>

<p>  In PostgreSQL, it would be like</p>

<pre><code>Meeting.where("import=?", true)
</code></pre>

<p>  Solution:</p>

<pre><code>so replace 0 and 1 with false and true in your all files then it work in both 
MySQL and PostgreSQL.
</code></pre>

<p><strong>3) Other differences:</strong></p>

<ol type='a'>
  <li>Fulltext Search: PostgreSQL is case sensitive. MySQL is not case sensitive.</li>
  <li>To select random records from DB, Mysql has a function called &#8220;rand()&#8221; and PostgreSQL has a function called &#8220;random()&#8221;.</li>
  <li>PostgreSQL ALTER TABLE supports ADD COLUMN, RENAME COLUMN and RENAME TABLE only. MySQL has all options in ALTER TABLE.</li>
  <li>In PostgreSQL, attribute name starting with numbers, like &#8220;360_degree&#8221; are not allowed.</li>
</ol>


<p>Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incompatible character encodings error in ruby 1.9]]></title>
    <link href="http://ranjithkumar.github.io/blog/2011/07/21/incompatible-character-encodings-error-in-ruby-1-9/"/>
    <updated>2011-07-21T16:01:47+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2011/07/21/incompatible-character-encodings-error-in-ruby-1-9</id>
    <content type="html"><![CDATA[<p><strong>Problem:</strong>
<em>Incompatible character encodings error while importing csv files in ruby 1.9 which have data in multiple languages.</em></p>

<p>I am using rails 3 and ruby 1.9.2 in my application.
While importing/parsing the CSV, I get an error &ldquo;Incompatible character encodings: ASCII-8bit and UTF-8&rdquo;. I quickly checked my database encoding, it was UTF-8 only and also in application.rb, I had<!--more--></p>

<pre><code>'config.encoding = "utf-8"'.
</code></pre>

<p>I had no idea what was going wrong&hellip;</p>

<p>After googling a bit, I found that couple of posts mentioned some workarounds for this issue, so I tried:</p>

<pre><code># encoding: utf-8 =&gt; in my class
and
"hello ümlaut".force_encoding("UTF-8")
</code></pre>

<p>That output was</p>

<pre><code>"hello ?mlat" 
</code></pre>

<p>With this the Error was fixed (no rails error) but the converted string value is incorrect. It was working correctly in some places but not everywhere.</p>

<p>I searched a bit more and then I found that the sequence of bytes that represent an “ü” is different in different encodings and could not be recognized in UTF-8, so such characters were replaced with a “?”.</p>

<p><strong>Solution:</strong>
  We have to find out that the original encoding of the string and then convert to UTF-8. To achieve this in ruby 1.9.2, we can&rsquo;t do it directly.
  so, we need to install the gem &lsquo;rchardet19&rsquo;
  and then add this to the top of your class, require &lsquo;iconv&rsquo;</p>

<p>  now,</p>

<pre><code>  data = CharDet.detect(value)
  puts "Detected encoding- #{data.encoding}"
</code></pre>

<p>  and,</p>

<pre><code>  value = (data.confidence &gt; 0.6 ? Iconv.iconv("UTF-8", data.encoding, value)
           : value)
</code></pre>

<p>  we are just converting to UTF-8 from the detected encoding.</p>

<p>  This fixes the issue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for faster loading web sites(Optimizing page load time)]]></title>
    <link href="http://ranjithkumar.github.io/blog/2011/02/15/tips-for-faster-loading-web-sitesoptimizing-page-load-time/"/>
    <updated>2011-02-15T11:01:44+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2011/02/15/tips-for-faster-loading-web-sitesoptimizing-page-load-time</id>
    <content type="html"><![CDATA[<p><strong>1) Make fewer HTTP request(Js, CSS &amp; image)</strong>
Most of the end-user response time is spent on the front-end and tied up in downloading all the components in the page like images, stylesheets, scripts, etc. Reducing the number of components in turn reduces the number of HTTP requests.</p>

<!--more-->


<p><em>a) Combined files</em> => its a way to reduce the number of HTTP requests by combining all files into a single file. ex: js &amp; css.
In our rails app, we used bundle_fu(<a href="https://github.com/timcharper/bundle-fu">https://github.com/timcharper/bundle-fu</a>). Its used to bundle all your assets very easy. It can speed your load time up around 50%.</p>

<p>Example put the following around your stylesheets/javascripts:</p>

<pre><code>         -bundle :name =&gt; "default_bundle" do
           = javascript_include_tag "http://w.sharethis.com/button/buttons.js"
           = stylesheet_link_tag 'jquery-ui', 'auto_complete/token-input.css'
           = javascript_include_tag 'jquery-1.4.2.js', 'jquery-ui.js', 'auto_complete/jquery.tokeninput.js', 'auto_complete/setup.js', 'underscore.js', 'date.js', 'cal.js', 'application.js', 'time_picker/jquery.timePicker.js', 'ajax_pagination.js'
           = stylesheet_link_tag 'compiled/certification.css','compiled/error.css', 'compiled/elements.css', 'compiled/messages.css', 'compiled/calendar.css', 'compiled/common.css', 'time_picker/timePicker.css', :media =&gt; 'screen, projection'
           = stylesheet_link_tag 'compiled/print.css', :media =&gt; 'print'
           = javascript_include_tag "markerCluster/jsapi", "markerCluster/map.js", "markerCluster/markerclusterer.js", "jquery-jtemplates"
</code></pre>

<p><em>b) CSS sprites</em>     => Its used to reducing the number of image requests. Combine your background images into a single image and use the CSS background-image and background-position properties to display the desired image segment.</p>

<p><strong>2) Avoid empty src or href</strong>
You may expect a browser to do nothing. But most browsers makes a request to server(sending a large amount of unexpected traffic).</p>

<p><strong>3) Compress components with gzip</strong>
This is used to reduce their file size over the wire by approximately 70%. This can be set up using your Apache(needs Apache 2, mod_deflate, mod_headers and access to server config) or Nginx config.</p>

<p>example for apache(in the server config file):</p>

<pre><code># Compress some text file types
AddOutputFilterByType DEFLATE text/html text/css text/xml application/x-javascript

# Deactivate compression for buggy browsers
BrowserMatch ^Mozilla/4 gzip-only-text/html
BrowserMatch ^Mozilla/4\.0[678] no-gzip
BrowserMatch \bMSIE !no-gzip !gzip-only-text/html

# Set header information for proxies
Header append Vary User-Agent
</code></pre>

<p><strong>4) Add expires headers for JS &amp; CSS</strong></p>

<p>There are two aspects to this rule:</p>

<ol type='a'>
<li> For static components: implement &#8220;Never expire&#8221; policy by setting far future Expires header</li>
<li> For dynamic components: use an appropriate Cache-Control header to help the browser with conditional requests</li>
</ol>


<p>This means that A first-time visitor to your page may have to make several HTTP requests, but by using the Expires header you make those components cacheable. The next request, Browser use a cache to reduce the number and size of HTTP requests, making web pages load faster. A web server uses the Expires header in the HTTP response to tell the client how long a component can be cached. However, it creates an additional problem too. The problem is what happens if you change these files? The browser will be stuck with the old files. The solution is to send a last modified timestamp with your requests (Ex: &ldquo;&lt;img src=&lsquo;/images/rails.png?84392578943&rsquo; /&gt;&rdquo;). Now your browser will know to ask for the file again. The &ldquo;timestamp&rdquo; is the default behavior of rails.</p>

<p><strong>5) Put CSS at top</strong>
Yahoo discovered that moving stylesheets to the document HEAD makes pages appear to be loading faster. This is because putting stylesheets in the HEAD allows the page to render progressively.</p>

<p><strong>6) Minify JS &amp; CSS</strong>
Minification is the practice of removing unnecessary characters from code like comments and unneeded white space characters (space, newline, tab and etc). This improves response time performance &amp; load times. You can use JSMin and YUI Compressor for minifying your JS code. Also some plugins are there, please check it here: <a href="https://github.com/sinefunc/sinatra-minify">https://github.com/sinefunc/sinatra-minify</a> and <a href="https://github.com/ericbarnes/ci-minify">https://github.com/ericbarnes/ci-minify</a>.</p>

<p>please check the screenshot. Right now, as you can see, I have made it Yslow grade from &ldquo;F&rdquo; to &ldquo;B&rdquo; very easily. I am sure, we can easily get grade &ldquo;A&rdquo; too&hellip; We need some support from the server side regarding &ldquo;Add expires header&rdquo; and &ldquo;Use Cookie-free Domains for Components&rdquo;. I have requested engineyard(hosting server) for the same. Waiting for the reply from them. By next week, it will turn into grade &ldquo;A&rdquo;.</p>

<p>and also found one good link from rubyquicktips. Benchmark.ms is very nice. its used to track how long some bit of code takes to process. please check it here: <a href="http://rubyquicktips.tumblr.com/post/2838217166/benchmark-ms-rails-you-sneaky-devil">http://rubyquicktips.tumblr.com/post/2838217166/benchmark-ms-rails-you-sneaky-devil</a></p>

<p>Before optimization:
<a href="http://ranjithkumar.github.io/images/before_optimization.png"><img title="Before optimization" width="400" src="http://ranjithkumar.github.io/images/before_optimization.png" /></a></p>

<p>After optimization:
<a href="http://ranjithkumar.github.io/images/after_optimization.png"><img title="After optimization" width="400" src="http://ranjithkumar.github.io/images/after_optimization.png" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["cycle" helper in Rails]]></title>
    <link href="http://ranjithkumar.github.io/blog/2010/03/07/cycle-helper-in-rails/"/>
    <updated>2010-03-07T17:01:42+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2010/03/07/cycle-helper-in-rails</id>
    <content type="html"><![CDATA[<p>If you wanna display the list of records with different(alternate) classes for table rows, then you can use this helper(you no need to check odd-even records). Rails has so many awesome feature like this.</p>

<p>for ex: if you want to apply &lsquo;odd&rsquo; and &lsquo;even&rsquo; class for alternate record<!--more--></p>

<pre><code> -season_hash.each do |k, v|
   %tr{:class =&gt; "#{cycle('odd', 'even')}"}
     %td= v["games"]
     %td= v["goals"]
     %td= v["assists"]
     %td= v["practices"]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["ordinalize" in Rails]]></title>
    <link href="http://ranjithkumar.github.io/blog/2010/03/07/ordinalize-in-rails/"/>
    <updated>2010-03-07T15:48:07+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2010/03/07/ordinalize-in-rails</id>
    <content type="html"><![CDATA[<p>How to display a date with suffix like &ldquo;th&rdquo;, &ldquo;st&rdquo;, &ldquo;nd&rdquo;, or &ldquo;rd&rdquo;?</p>

<p>for example, I wanna display like this Mon, 7th April</p>

<p>Rails has inbuilt function &ndash; &ldquo;ordinalize&rdquo;<!--more--></p>

<p>It turns a number into an ordinal string used to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th</p>

<pre><code>date.strftime("%a, #{date.day.ordinalize} %B")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking sphinx with multiple instance]]></title>
    <link href="http://ranjithkumar.github.io/blog/2010/02/07/thinking-sphinx-with-multiple-instance/"/>
    <updated>2010-02-07T14:17:54+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2010/02/07/thinking-sphinx-with-multiple-instance</id>
    <content type="html"><![CDATA[<p><strong>Problem:</strong> How to run multiple thinking_sphinx instance in the single app itself?</p>

<p><strong>Solution:</strong> this can usually be done by adding some settings to a file named sphinx.yml in your config directory.<!--more--></p>

<p><strong>Example:</strong></p>

<pre><code>development:
    port: 3312

test:
    port: 3313

production:
    port: 3315
</code></pre>

<p><strong>References</strong>: <a href="http://freelancing-god.github.com/ts/en/advanced_config.html">http://freelancing-god.github.com/ts/en/advanced_config.html</a></p>
]]></content>
  </entry>
  
</feed>
