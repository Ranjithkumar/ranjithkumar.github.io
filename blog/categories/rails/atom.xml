<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Ranjith's Blog]]></title>
  <link href="http://ranjithkumar.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://ranjithkumar.github.io/"/>
  <updated>2014-12-10T12:27:29+05:30</updated>
  <id>http://ranjithkumar.github.io/</id>
  <author>
    <name><![CDATA[Ranjithkumar Ravi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails#send_file + Nginx X-Accel-Redirect]]></title>
    <link href="http://ranjithkumar.github.io/blog/2014/09/10/rails-number-send-file-plus-nginx-x-accel-redirect/"/>
    <updated>2014-09-10T16:13:33+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2014/09/10/rails-number-send-file-plus-nginx-x-accel-redirect</id>
    <content type="html"><![CDATA[<p>Sometimes you may need to serve some static files (CSV, PDF, XLS etc) to your users, but only after they have logged in. Obviously you can’t just keep the static file in your public folder as anyone could just use the URL to download files.</p>

<p>One possible solution for protected downloads is to just use the #send_file method provided by Rack to send a non-public file to the user, but serving static files with your app server (Unicorn, Mongrel, Thin etc) is a bad idea as it’s really inefficient. The best approach is to allow the app server to handle the authentication/authorization and then hand the actual downloading to your web server (Nginx, Apache, Lighttpd etc).</p>

<!--more-->


<p>In Lighttpd server it can be done by returning X-Sendfile header from your script. Nginx have its own implementation of such idea using X-Accel-Redirect header.</p>

<p><strong>The need for X-Accel-Redirect:</strong></p>

<ul>
<li>To deliver large files.</li>
<li>For those files to not be available to the public</li>
<li>Would be able to free some resources on server while nginx will handle all slow requests to dynamic content</li>
</ul>


<p>In this article I will assume that the site is located in <em>/home/kranjith/sites/projects/blog</em> directory and there are some static files (like CSV, PDF, XLS etc) located in <em>/home/kranjith/sites/projects/blog/uploads</em> directory.</p>

<p>First of all, lets take a look at our nginx configuration:</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># Nginx X-Accel-Redirect configuration for Rails and Unicorn </span>
<span style="color: white">upstream unicorn_blog_server {</span>
    <span style="color: white">server unix:/home/kranjith/sites/projects/blog/tmp/sockets/unicorn.sock</span>
    <span style="color: white">fail_timeout=0;</span>
<span style="color: white">}</span>

<span style="color: white">server {</span>
    <span style="color: white">listen       80;</span>
    <span style="color: white">server_name  example.org;</span>
 
    <span style="color: white">root /home/kranjith/sites/projects/blog/public;</span>
    
    <span style="color: white">location /downloads {</span>
      <span style="color: white">internal;</span>
      <span style="color: white">alias /home/kranjith/sites/projects/blog/uploads;</span>
    <span style="color: white">}</span>
    
    <span style="color: white">location / {</span>
       <span style="color: white">try_files $uri @blog;</span>
    <span style="color: white">}</span>

    <span style="color: white">location @blog {</span>
      <span style="color: white">proxy_redirect    off;</span>
      
      <span style="color: white">proxy_set_header  Host              $http_host;</span>
      <span style="color: white">proxy_set_header  X-Real-IP         $remote_addr;</span>
      <span style="color: white">proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;</span>
 
      <span style="color: white">proxy_set_header  X-Sendfile-Type   X-Accel-Redirect;</span>
      <span style="color: white">proxy_set_header  X-Accel-Mapping   /home/kranjith/sites/projects/blog/uploads/=/downloads/;</span>
      
      <span style="color: white">proxy_pass http://unicorn_blog_server;</span>
    <span style="color: white">}</span>
<span style="color: white">}</span>
</pre></div>


<p><strong>The internal keyword for the /downloads location prevents the uploads folder from being publicly accessible</strong>.</p>

<p>Next you need to ensure that Rails knows what server you are using</p>

<p>In <em>config/environments/production.rb</em> file.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># Specifies the header that your server uses for sending files.</span>
<span style="color: #f8f8f2">config</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">action_dispatch</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">x_sendfile_header</span> <span style="color: #f92672">=</span> <span style="color: #e6db74">&#39;X-Accel-Redirect&#39;</span> <span style="color: #75715e"># for nginx</span>
</pre>
</div>


<p>In <em>DownloadsController</em>, just do whatever authorization you need to, then use #send_file to serve the file to the user:</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #66d9ef">class</span> <span style="color: #a6e22e">DownloadsController</span> <span style="color: #f92672">&lt;</span> <span style="color: #66d9ef">ApplicationController</span>
  <span style="color: #f8f8f2">load_and_authorize_resource</span>

  <span style="color: #66d9ef">def</span> <span style="color: #a6e22e">show</span>
    <span style="color: #f8f8f2">send_file(</span> <span style="color: #66d9ef">Rails</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">root</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">to_s</span> <span style="color: #f92672">+</span> <span style="color: #f8f8f2">@uploaded_file</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">file</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">url,</span> <span style="color: #e6db74">type</span><span style="color: #f8f8f2">:</span> <span style="color: #f8f8f2">@uploaded_file</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">content_type,</span> <span style="color: #e6db74">filename</span><span style="color: #f8f8f2">:</span> <span style="color: #f8f8f2">@uploaded_file</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">filename,</span> <span style="color: #e6db74">dispostion</span><span style="color: #f8f8f2">:</span> <span style="color: #e6db74">&quot;inline&quot;</span><span style="color: #f8f8f2">,</span> <span style="color: #e6db74">status</span><span style="color: #f8f8f2">:</span> <span style="color: #ae81ff">200</span><span style="color: #f8f8f2">,</span> <span style="color: #e6db74">stream</span><span style="color: #f8f8f2">:</span> <span style="color: #66d9ef">true</span><span style="color: #f8f8f2">,</span> <span style="color: #f8f8f2">x_sendfile:</span> <span style="color: #66d9ef">true</span> <span style="color: #f8f8f2">)</span>   
  <span style="color: #66d9ef">end</span>   
<span style="color: #66d9ef">end</span>
</pre></div>


<p>I am using CarrierWave to upload files from Rails applications. In <em>config/initializers/carrierwave.rb</em></p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #66d9ef">CarrierWave</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">configure</span> <span style="color: #66d9ef">do</span> <span style="color: #f92672">|</span><span style="color: #f8f8f2">config</span><span style="color: #f92672">|</span>
  <span style="color: #f8f8f2">config</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">storage</span> <span style="color: #f92672">=</span> <span style="color: #e6db74">:file</span>
  <span style="color: #f8f8f2">config</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">root</span> <span style="color: #f92672">=</span> <span style="color: #66d9ef">Rails</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">root</span>
  <span style="color: #f8f8f2">config</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">store_dir</span> <span style="color: #f92672">=</span> <span style="color: #e6db74">&quot;uploads&quot;</span>
<span style="color: #66d9ef">end</span>
</pre></div>


<p>And that’s it! <strong>With described approach we are able to create very flexible and extremely performance systems for file distribution!</strong></p>

<p>Now I’m going to run through a specific example of downloading a file.</p>

<p>1.Browser makes a request for a file</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># HTTP Headers</span>
<span style="color: white">GET /downloads/SecretSquirrel.zip</span>
</pre></div>


<p>2.Nginx receives this request. It adds on a header with configuration data that will be required by rails.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># Example HTTP Headers with additional header added by nginx</span>
<span style="color: white">GET /downloads/SecretSquirrel.zip</span>
<span style="color: white">X-Accel-Mapping</span><span style="color: #f8f8f2">:</span>   <span style="color: white">/home/kranjith/sites/projects/blog/uploads/=/downloads/</span>
</pre></div>


<p>3.Nginx passes the request onto Rails and it invokes the relevant controller.</p>

<p>4.The controller makes its authorization checks and calls send_file. Use the absolute path to the file.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># controller code (e.g. app/controllers/downloads_controller.rb)</span>
<span style="color: white">send_file(&#39;/home/kranjith/sites/projects/blog/uploads/SecretSquirrel.zip&#39;)</span>
</pre></div>


<p>5.Rails (Rack to be precise) then decides what to with the file. Rails knows what server we are using (from <em>config/environments/production.rb</em>). Instead of using the file as the body of the request, it will add a header to the response. It uses the X-Accel-Mapping that nginx added earlier to change the file path.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># HTTP Response</span>
<span style="color: white">HTTP/1.1 200 OK</span>
<span style="color: white">X-Accel-Redirect</span><span style="color: #f8f8f2">:</span> <span style="color: white">/downloads/SecretSquirrel.zip</span>
<span style="color: white">Content-Type</span><span style="color: #f8f8f2">:</span> <span style="color: white">application/octet-stream</span>
<span style="color: white">Content-length</span><span style="color: #f8f8f2">:</span> <span style="color: white">...</span>
<span style="color: white">Content-Disposition</span><span style="color: #f8f8f2">:</span> <span style="color: white">attachment; filename=&quot;SecretSquirrel.zip&quot;</span>
<span style="color: white">&lt;empty body&gt;</span>
</pre></div>


<p>6.Nginx receives this header from rails and interprets it. It finds the location directive and reverses the changes to the path that rails made in step 5.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># HTTP Response</span>
<span style="color: white">HTTP/1.1 200 OK</span>
<span style="color: white">Content-Type</span><span style="color: #f8f8f2">:</span> <span style="color: white">application/octet-stream</span>
<span style="color: white">Content-Length</span><span style="color: #f8f8f2">:</span> <span style="color: white">...</span>
<span style="color: white">Content-Disposition</span><span style="color: #f8f8f2">:</span> <span style="color: white">attachment; filename=&quot;SecretSquirrel.zip&quot;</span>
<span style="color: white">&lt;contents of /home/kranjith/sites/projects/blog/uploads/SecretSquirrel.zip&gt;</span>
</pre></div>


<p>7.Browser receives the file as if it was a normal download.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveResource Custom Method Calls &amp; Responses]]></title>
    <link href="http://ranjithkumar.github.io/blog/2014/07/03/activeresource-custom-method-calls-and-responses/"/>
    <updated>2014-07-03T10:52:35+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2014/07/03/activeresource-custom-method-calls-and-responses</id>
    <content type="html"><![CDATA[<p>Active Resource supports defining our own custom REST methods. A custom method call is one that is not one of the default CRUD actions that you get out of the box with RESTful routing.</p>

<p>To invoke them, Active Resource provides the get, post, put and delete methods where you can specify a custom REST method name to invoke.</p>

<!--more-->


<p><strong>Here one thing to note is that, all custom method calls return the remote service response except &lsquo;get&rsquo;. &lsquo;get&rsquo; returns a hash (or array of hashes).</strong></p>

<pre><code># GET all managers(collection custom method), i.e. GET /people/managers.json
Person.get(:managers)
#=&gt; [{:name =&gt; "Rans"}, {:name =&gt; "Gokul"}]
</code></pre>

<p><strong>If you want to get actual objects from a get call, you can use the find method.</strong></p>

<pre><code># GET all managers(collection custom method), i.e. GET /people/managers.json
Person.find(:all, from: :managers)
#=&gt; &lt;#Person...&gt;&lt;#Person ...&gt;
</code></pre>

<p>Options :from &ndash; Sets the path or custom method that resources will be fetched from.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Form builder object on AJAX callback]]></title>
    <link href="http://ranjithkumar.github.io/blog/2014/04/18/form-builder-object-on-ajax-callback/"/>
    <updated>2014-04-18T16:23:06+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2014/04/18/form-builder-object-on-ajax-callback</id>
    <content type="html"><![CDATA[<p><strong>Problem:</strong></p>

<p>My application has a select box for users to choose a &ldquo;mapping&rdquo; for the upload. Based on mapping, user should see the default options selected in that form. When user changes the mapping, an AJAX request gets called and renders a js.erb file. The rendered js should render a partial that has fields_for a nested model. My challenge is, How to pass the form build object to the partial on AJAX callback?</p>

<!--more-->


<p><em>upload_page.html.erb:</em></p>

<pre><code>&lt;%= form_for :upload do |f| %&gt;
  Some divs....

  &lt;div&gt;
    &lt;label&gt;Mapping: &lt;/label&gt;
    &lt;%= f.select :mapping_id, options_from_collection_for_select(@mappings, "id"
    , "name"), {}, { class: "default_mapping_change" } %&gt;
  &lt;/div&gt;

  &lt;div id="mapping_option"&gt;
        &lt;%= render "mapping_option_form", f: f, default_mapping: @mapping %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code></pre>

<p>On my ajax callback, I replace &ldquo;mapping_option&rdquo; div with the update object.</p>

<p><strong>Solution:</strong></p>

<p>Create a new form in the js.erb file and passing that one to the partial.</p>

<p><em>default_mapping_change.js.erb:</em></p>

<pre><code>'&lt;%= form_for :upload do |f| %&gt;'
    $("#mapping_option").html("&lt;%= j(render "mapping_option_form", f: f,
    default_mapping: @mapping) %&gt;");
'&lt;% end %&gt;'
</code></pre>

<p><strong>The single quotes around the form tag are important, or else there will be some javascript escaping issue.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sidekiq configuration for SOA / multiple environments on same server]]></title>
    <link href="http://ranjithkumar.github.io/blog/2014/03/04/sidekiq-configuration-for-soa-multiple-environments-on-same-server/"/>
    <updated>2014-03-04T11:37:56+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2014/03/04/sidekiq-configuration-for-soa-multiple-environments-on-same-server</id>
    <content type="html"><![CDATA[<p>The Sidekiq configuration file by default located at <em>config/sidekiq.yml</em>. It is only necessary to create the file if you need to set advanced options, such as concurrency pool size, named queues, PID file location, etc.</p>

<!--more-->


<p>Here is an example configuration file:</p>

<pre><code>:concurrency: 5
:pidfile: tmp/pids/sidekiq.pid
staging:
 :concurrency: 10
production:
 :concurrency: 50
:queues:
 - default
</code></pre>

<p>By default, one Sidekiq process will be started on each app server.</p>

<p><strong>Setting the Location of your Redis server</strong></p>

<p>By default, Redis is located at <em>localhost:6379</em>.</p>

<p>Following is my development environment,
<em>SOA + Ruby(2.0) + Rails(4.0) + Unicorn  + Nginx  + SideKiq + MultiTenant</em></p>

<p>In your <em>config/initializers/sidekiq.rb</em> file,</p>

<pre><code>Sidekiq.configure_server do |config|
  config.redis = { url: 'redis://localhost:6379/0', namespace: "sidekiq_app_name_#{Rails.env}" }
end

Sidekiq.configure_client do |config|
  config.redis = { url: 'redis://localhost:6379/0', namespace: "sidekiq_app_name_#{Rails.env}" }
end
</code></pre>

<p>Usage:
<em>The :namespace parameter is recommended if Sidekiq is sharing access to a Redis database.</em></p>

<p>Finally, start sidekiq from the root directory of your Rails app.</p>

<blockquote>bundle exec sidekiq -e staging -C config/sidekiq.yml</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for faster loading web sites(Optimizing page load time)]]></title>
    <link href="http://ranjithkumar.github.io/blog/2011/02/15/tips-for-faster-loading-web-sitesoptimizing-page-load-time/"/>
    <updated>2011-02-15T11:01:44+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2011/02/15/tips-for-faster-loading-web-sitesoptimizing-page-load-time</id>
    <content type="html"><![CDATA[<p><strong>1) Make fewer HTTP request(Js, CSS &amp; image)</strong>
Most of the end-user response time is spent on the front-end and tied up in downloading all the components in the page like images, stylesheets, scripts, etc. Reducing the number of components in turn reduces the number of HTTP requests.</p>

<!--more-->


<p><em>a) Combined files</em> => its a way to reduce the number of HTTP requests by combining all files into a single file. ex: js &amp; css.
In our rails app, we used bundle_fu(<a href="https://github.com/timcharper/bundle-fu">https://github.com/timcharper/bundle-fu</a>). Its used to bundle all your assets very easy. It can speed your load time up around 50%.</p>

<p>Example put the following around your stylesheets/javascripts:</p>

<pre><code>         -bundle :name =&gt; "default_bundle" do
           = javascript_include_tag "http://w.sharethis.com/button/buttons.js"
           = stylesheet_link_tag 'jquery-ui', 'auto_complete/token-input.css'
           = javascript_include_tag 'jquery-1.4.2.js', 'jquery-ui.js', 'auto_complete/jquery.tokeninput.js', 'auto_complete/setup.js', 'underscore.js', 'date.js', 'cal.js', 'application.js', 'time_picker/jquery.timePicker.js', 'ajax_pagination.js'
           = stylesheet_link_tag 'compiled/certification.css','compiled/error.css', 'compiled/elements.css', 'compiled/messages.css', 'compiled/calendar.css', 'compiled/common.css', 'time_picker/timePicker.css', :media =&gt; 'screen, projection'
           = stylesheet_link_tag 'compiled/print.css', :media =&gt; 'print'
           = javascript_include_tag "markerCluster/jsapi", "markerCluster/map.js", "markerCluster/markerclusterer.js", "jquery-jtemplates"
</code></pre>

<p><em>b) CSS sprites</em>     => Its used to reducing the number of image requests. Combine your background images into a single image and use the CSS background-image and background-position properties to display the desired image segment.</p>

<p><strong>2) Avoid empty src or href</strong>
You may expect a browser to do nothing. But most browsers makes a request to server(sending a large amount of unexpected traffic).</p>

<p><strong>3) Compress components with gzip</strong>
This is used to reduce their file size over the wire by approximately 70%. This can be set up using your Apache(needs Apache 2, mod_deflate, mod_headers and access to server config) or Nginx config.</p>

<p>example for apache(in the server config file):</p>

<pre><code># Compress some text file types
AddOutputFilterByType DEFLATE text/html text/css text/xml application/x-javascript

# Deactivate compression for buggy browsers
BrowserMatch ^Mozilla/4 gzip-only-text/html
BrowserMatch ^Mozilla/4\.0[678] no-gzip
BrowserMatch \bMSIE !no-gzip !gzip-only-text/html

# Set header information for proxies
Header append Vary User-Agent
</code></pre>

<p><strong>4) Add expires headers for JS &amp; CSS</strong></p>

<p>There are two aspects to this rule:</p>

<ol type='a'>
<li> For static components: implement "Never expire" policy by setting far future Expires header</li>
<li> For dynamic components: use an appropriate Cache-Control header to help the browser with conditional requests</li>
</ol>


<p>This means that A first-time visitor to your page may have to make several HTTP requests, but by using the Expires header you make those components cacheable. The next request, Browser use a cache to reduce the number and size of HTTP requests, making web pages load faster. A web server uses the Expires header in the HTTP response to tell the client how long a component can be cached. However, it creates an additional problem too. The problem is what happens if you change these files? The browser will be stuck with the old files. The solution is to send a last modified timestamp with your requests (Ex: &ldquo;&lt;img src=&lsquo;<a href="http://ranjithkumar.github.io/images/rails.png?84392578943">http://ranjithkumar.github.io/images/rails.png?84392578943</a>&rsquo; /&gt;&rdquo;). Now your browser will know to ask for the file again. The &ldquo;timestamp&rdquo; is the default behavior of rails.</p>

<p><strong>5) Put CSS at top</strong>
Yahoo discovered that moving stylesheets to the document HEAD makes pages appear to be loading faster. This is because putting stylesheets in the HEAD allows the page to render progressively.</p>

<p><strong>6) Minify JS &amp; CSS</strong>
Minification is the practice of removing unnecessary characters from code like comments and unneeded white space characters (space, newline, tab and etc). This improves response time performance &amp; load times. You can use JSMin and YUI Compressor for minifying your JS code. Also some plugins are there, please check it here: <a href="https://github.com/sinefunc/sinatra-minify">https://github.com/sinefunc/sinatra-minify</a> and <a href="https://github.com/ericbarnes/ci-minify">https://github.com/ericbarnes/ci-minify</a>.</p>

<p>please check the screenshot. Right now, as you can see, I have made it Yslow grade from &ldquo;F&rdquo; to &ldquo;B&rdquo; very easily. I am sure, we can easily get grade &ldquo;A&rdquo; too&hellip; We need some support from the server side regarding &ldquo;Add expires header&rdquo; and &ldquo;Use Cookie-free Domains for Components&rdquo;. I have requested engineyard(hosting server) for the same. Waiting for the reply from them. By next week, it will turn into grade &ldquo;A&rdquo;.</p>

<p>and also found one good link from rubyquicktips. Benchmark.ms is very nice. its used to track how long some bit of code takes to process. please check it here: <a href="http://rubyquicktips.tumblr.com/post/2838217166/benchmark-ms-rails-you-sneaky-devil">http://rubyquicktips.tumblr.com/post/2838217166/benchmark-ms-rails-you-sneaky-devil</a></p>

<p>Before optimization:
<a href="/images/before_optimization.png"><img title="Before optimization" width="400" src="/images/before_optimization.png" /></a></p>

<p>After optimization:
<a href="/images/after_optimization.png"><img title="After optimization" width="400" src="/images/after_optimization.png" /></a></p>
]]></content>
  </entry>
  
</feed>
