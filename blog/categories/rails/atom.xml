<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Ranjith's Blog]]></title>
  <link href="http://ranjithkumar.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://ranjithkumar.github.io/"/>
  <updated>2014-12-15T12:41:16+05:30</updated>
  <id>http://ranjithkumar.github.io/</id>
  <author>
    <name><![CDATA[Ranjithkumar Ravi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails I18n translations on the JavaScript]]></title>
    <link href="http://ranjithkumar.github.io/blog/2014/12/12/rails-i18n-translations-on-the-javascript/"/>
    <updated>2014-12-12T11:49:21+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2014/12/12/rails-i18n-translations-on-the-javascript</id>
    <content type="html"><![CDATA[<p>Recently, my user story demanded me to translate some text in raw JavaScript file. I know that I can easily use them in my <em>.js.erb</em> templates. But what about the Javascript files(<em>.js</em>)?</p>

<p><a href="https://github.com/fnando/i18n-js"><strong>I18n.js</strong></a> is a small library to provide the Rails I18n translations on the JavaScript.</p>

<!--more-->


<p><strong>Steps for setting up i18n-js:</strong></p>

<p>1) Add i18n-js gem to your Gemfile<br/></p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #cccccc">gem</span> <span style="color: #cd0000">&quot;i18n-js&quot;</span><span style="color: #cccccc">,</span> <span style="color: #cd0000">&quot;&gt;= 3.0.0.rc8&quot;</span>
<span style="color: #cccccc">bundle</span> <span style="color: #cccccc">install</span>
</pre></div>


<p>2) If you&rsquo;re using the asset pipeline, add the following lines in <em>app/assets/javascripts/application.js</em></p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #cd0000">//</span><span style="color: #3399cc">=</span> <span style="color: #cd00cd">require</span> <span style="color: #cccccc">i18n</span>
<span style="color: #cd0000">//</span><span style="color: #3399cc">=</span> <span style="color: #cd00cd">require</span> <span style="color: #cccccc">i18n</span><span style="color: #3399cc">/</span><span style="color: #cccccc">translations</span>
</pre></div>


<p>If you&rsquo;re not using the asset pipeline, add the following lines in your <em>application.html.erb</em> (layout file)</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #3399cc">&lt;%=</span> <span style="color: #cccccc">javascript_include_tag</span> <span style="color: #cd0000">&quot;i18n&quot;</span> <span style="color: #3399cc">%&gt;</span>
<span style="color: #3399cc">&lt;%=</span> <span style="color: #cccccc">javascript_include_tag</span> <span style="color: #cd0000">&quot;translations&quot;</span> <span style="color: #3399cc">%&gt;</span>
</pre></div>


<p>3) To export all translation files, run the following commands</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #cccccc">rake</span> <span style="color: #cd0000">i18n</span><span style="color: #cccccc">:</span><span style="color: #cd0000">js</span><span style="color: #cccccc">:export</span>
</pre></div>


<p>4) Add the following lines in your <em>application.html.erb</em> (layout file)</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #cccccc">&lt;script type=</span><span style="color: #cd0000">&quot;text/javascript&quot;</span><span style="color: #cccccc">&gt;</span>
     <span style="color: #cccccc">I18n.defaultLocale</span> <span style="color: #3399cc">=</span> <span style="color: #cd0000">&quot;</span><span style="color: #3399cc">&lt;%=</span> <span style="color: #cccccc">I18n</span><span style="color: #3399cc">.</span><span style="color: #cccccc">default_locale</span> <span style="color: #3399cc">%&gt;</span><span style="color: #cd0000">&quot;</span><span style="color: #cccccc">;</span>
     <span style="color: #cccccc">I18n.locale</span> <span style="color: #3399cc">=</span> <span style="color: #cd0000">&quot;</span><span style="color: #3399cc">&lt;%=</span> <span style="color: #cccccc">I18n</span><span style="color: #3399cc">.</span><span style="color: #cccccc">locale</span> <span style="color: #3399cc">%&gt;</span><span style="color: #cd0000">&quot;</span><span style="color: #cccccc">;</span>
<span style="color: #cccccc">&lt;/script&gt;</span>
</pre></div>


<p>5) Finally, you can use translate your text in <em>js</em> file.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #cccccc">I18n</span><span style="color: #3399cc">.</span><span style="color: #cccccc">t(</span><span style="color: #cd0000">&quot;some.scoped.translation&quot;</span><span style="color: #cccccc">);</span>
</pre></div>


<p><strong>Note:</strong> Run the following command every time you have new translation in the <em>.yml</em> file</p>

<!-- HTML generated using hilite.me -->


<div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #cccccc">rake</span> <span style="color: #cd0000">i18n</span><span style="color: #cccccc">:</span><span style="color: #cd0000">js</span><span style="color: #cccccc">:export</span>
</pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails#send_file + Nginx X-Accel-Redirect]]></title>
    <link href="http://ranjithkumar.github.io/blog/2014/09/10/rails-number-send-file-plus-nginx-x-accel-redirect/"/>
    <updated>2014-09-10T16:13:33+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2014/09/10/rails-number-send-file-plus-nginx-x-accel-redirect</id>
    <content type="html"><![CDATA[<p>Sometimes you may need to serve some static files (CSV, PDF, XLS etc) to your users, but only after they have logged in. Obviously you can’t just keep the static file in your public folder as anyone could just use the URL to download files.</p>

<p>One possible solution for protected downloads is to just use the #send_file method provided by Rack to send a non-public file to the user, but serving static files with your app server (Unicorn, Mongrel, Thin etc) is a bad idea as it’s really inefficient. The best approach is to allow the app server to handle the authentication/authorization and then hand the actual downloading to your web server (Nginx, Apache, Lighttpd etc).</p>

<!--more-->


<p>In Lighttpd server it can be done by returning X-Sendfile header from your script. Nginx have its own implementation of such idea using X-Accel-Redirect header.</p>

<p><strong>The need for X-Accel-Redirect:</strong></p>

<ul>
<li>To deliver large files.</li>
<li>For those files to not be available to the public</li>
<li>Would be able to free some resources on server while nginx will handle all slow requests to dynamic content</li>
</ul>


<p>In this article I will assume that the site is located in <em>/home/kranjith/sites/projects/blog</em> directory and there are some static files (like CSV, PDF, XLS etc) located in <em>/home/kranjith/sites/projects/blog/uploads</em> directory.</p>

<p>First of all, lets take a look at our nginx configuration:</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># Nginx X-Accel-Redirect configuration for Rails and Unicorn </span>
<span style="color: white">upstream unicorn_blog_server {</span>
    <span style="color: white">server unix:/home/kranjith/sites/projects/blog/tmp/sockets/unicorn.sock</span>
    <span style="color: white">fail_timeout=0;</span>
<span style="color: white">}</span>

<span style="color: white">server {</span>
    <span style="color: white">listen       80;</span>
    <span style="color: white">server_name  example.org;</span>
 
    <span style="color: white">root /home/kranjith/sites/projects/blog/public;</span>
    
    <span style="color: white">location /downloads {</span>
      <span style="color: white">internal;</span>
      <span style="color: white">alias /home/kranjith/sites/projects/blog/uploads;</span>
    <span style="color: white">}</span>
    
    <span style="color: white">location / {</span>
       <span style="color: white">try_files $uri @blog;</span>
    <span style="color: white">}</span>

    <span style="color: white">location @blog {</span>
      <span style="color: white">proxy_redirect    off;</span>
      
      <span style="color: white">proxy_set_header  Host              $http_host;</span>
      <span style="color: white">proxy_set_header  X-Real-IP         $remote_addr;</span>
      <span style="color: white">proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;</span>
 
      <span style="color: white">proxy_set_header  X-Sendfile-Type   X-Accel-Redirect;</span>
      <span style="color: white">proxy_set_header  X-Accel-Mapping   /home/kranjith/sites/projects/blog/uploads/=/downloads/;</span>
      
      <span style="color: white">proxy_pass http://unicorn_blog_server;</span>
    <span style="color: white">}</span>
<span style="color: white">}</span>
</pre></div>


<p><strong>The internal keyword for the /downloads location prevents the uploads folder from being publicly accessible</strong>.</p>

<p>Next you need to ensure that Rails knows what server you are using</p>

<p>In <em>config/environments/production.rb</em> file.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># Specifies the header that your server uses for sending files.</span>
<span style="color: #f8f8f2">config</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">action_dispatch</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">x_sendfile_header</span> <span style="color: #f92672">=</span> <span style="color: #e6db74">&#39;X-Accel-Redirect&#39;</span> <span style="color: #75715e"># for nginx</span>
</pre>
</div>


<p>In <em>DownloadsController</em>, just do whatever authorization you need to, then use #send_file to serve the file to the user:</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #66d9ef">class</span> <span style="color: #a6e22e">DownloadsController</span> <span style="color: #f92672">&lt;</span> <span style="color: #66d9ef">ApplicationController</span>
  <span style="color: #f8f8f2">load_and_authorize_resource</span>

  <span style="color: #66d9ef">def</span> <span style="color: #a6e22e">show</span>
    <span style="color: #f8f8f2">send_file(</span> <span style="color: #66d9ef">Rails</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">root</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">to_s</span> <span style="color: #f92672">+</span> <span style="color: #f8f8f2">@uploaded_file</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">file</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">url,</span> <span style="color: #e6db74">type</span><span style="color: #f8f8f2">:</span> <span style="color: #f8f8f2">@uploaded_file</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">content_type,</span> <span style="color: #e6db74">filename</span><span style="color: #f8f8f2">:</span> <span style="color: #f8f8f2">@uploaded_file</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">filename,</span> <span style="color: #e6db74">dispostion</span><span style="color: #f8f8f2">:</span> <span style="color: #e6db74">&quot;inline&quot;</span><span style="color: #f8f8f2">,</span> <span style="color: #e6db74">status</span><span style="color: #f8f8f2">:</span> <span style="color: #ae81ff">200</span><span style="color: #f8f8f2">,</span> <span style="color: #e6db74">stream</span><span style="color: #f8f8f2">:</span> <span style="color: #66d9ef">true</span><span style="color: #f8f8f2">,</span> <span style="color: #f8f8f2">x_sendfile:</span> <span style="color: #66d9ef">true</span> <span style="color: #f8f8f2">)</span>   
  <span style="color: #66d9ef">end</span>   
<span style="color: #66d9ef">end</span>
</pre></div>


<p>I am using CarrierWave to upload files from Rails applications. In <em>config/initializers/carrierwave.rb</em></p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #66d9ef">CarrierWave</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">configure</span> <span style="color: #66d9ef">do</span> <span style="color: #f92672">|</span><span style="color: #f8f8f2">config</span><span style="color: #f92672">|</span>
  <span style="color: #f8f8f2">config</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">storage</span> <span style="color: #f92672">=</span> <span style="color: #e6db74">:file</span>
  <span style="color: #f8f8f2">config</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">root</span> <span style="color: #f92672">=</span> <span style="color: #66d9ef">Rails</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">root</span>
  <span style="color: #f8f8f2">config</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">store_dir</span> <span style="color: #f92672">=</span> <span style="color: #e6db74">&quot;uploads&quot;</span>
<span style="color: #66d9ef">end</span>
</pre></div>


<p>And that’s it! <strong>With described approach we are able to create very flexible and extremely performance systems for file distribution!</strong></p>

<p>Now I’m going to run through a specific example of downloading a file.</p>

<p>1.Browser makes a request for a file</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># HTTP Headers</span>
<span style="color: white">GET /downloads/SecretSquirrel.zip</span>
</pre></div>


<p>2.Nginx receives this request. It adds on a header with configuration data that will be required by rails.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># Example HTTP Headers with additional header added by nginx</span>
<span style="color: white">GET /downloads/SecretSquirrel.zip</span>
<span style="color: white">X-Accel-Mapping</span><span style="color: #f8f8f2">:</span>   <span style="color: white">/home/kranjith/sites/projects/blog/uploads/=/downloads/</span>
</pre></div>


<p>3.Nginx passes the request onto Rails and it invokes the relevant controller.</p>

<p>4.The controller makes its authorization checks and calls send_file. Use the absolute path to the file.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># controller code (e.g. app/controllers/downloads_controller.rb)</span>
<span style="color: white">send_file(&#39;/home/kranjith/sites/projects/blog/uploads/SecretSquirrel.zip&#39;)</span>
</pre></div>


<p>5.Rails (Rack to be precise) then decides what to with the file. Rails knows what server we are using (from <em>config/environments/production.rb</em>). Instead of using the file as the body of the request, it will add a header to the response. It uses the X-Accel-Mapping that nginx added earlier to change the file path.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># HTTP Response</span>
<span style="color: white">HTTP/1.1 200 OK</span>
<span style="color: white">X-Accel-Redirect</span><span style="color: #f8f8f2">:</span> <span style="color: white">/downloads/SecretSquirrel.zip</span>
<span style="color: white">Content-Type</span><span style="color: #f8f8f2">:</span> <span style="color: white">application/octet-stream</span>
<span style="color: white">Content-length</span><span style="color: #f8f8f2">:</span> <span style="color: white">...</span>
<span style="color: white">Content-Disposition</span><span style="color: #f8f8f2">:</span> <span style="color: white">attachment; filename=&quot;SecretSquirrel.zip&quot;</span>
<span style="color: white">&lt;empty body&gt;</span>
</pre></div>


<p>6.Nginx receives this header from rails and interprets it. It finds the location directive and reverses the changes to the path that rails made in step 5.</p>

<!-- HTML generated using hilite.me -->


<div style="background: #272822; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;font-size: 0.8em;">
<pre style="margin: 0; line-height: 125%; background: none; border: 0;"><span style="color: #75715e"># HTTP Response</span>
<span style="color: white">HTTP/1.1 200 OK</span>
<span style="color: white">Content-Type</span><span style="color: #f8f8f2">:</span> <span style="color: white">application/octet-stream</span>
<span style="color: white">Content-Length</span><span style="color: #f8f8f2">:</span> <span style="color: white">...</span>
<span style="color: white">Content-Disposition</span><span style="color: #f8f8f2">:</span> <span style="color: white">attachment; filename=&quot;SecretSquirrel.zip&quot;</span>
<span style="color: white">&lt;contents of /home/kranjith/sites/projects/blog/uploads/SecretSquirrel.zip&gt;</span>
</pre></div>


<p>7.Browser receives the file as if it was a normal download.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveResource Custom Method Calls &amp; Responses]]></title>
    <link href="http://ranjithkumar.github.io/blog/2014/07/03/activeresource-custom-method-calls-and-responses/"/>
    <updated>2014-07-03T10:52:35+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2014/07/03/activeresource-custom-method-calls-and-responses</id>
    <content type="html"><![CDATA[<p>Active Resource supports defining our own custom REST methods. A custom method call is one that is not one of the default CRUD actions that you get out of the box with RESTful routing.</p>

<p>To invoke them, Active Resource provides the get, post, put and delete methods where you can specify a custom REST method name to invoke.</p>

<!--more-->


<p><strong>Here one thing to note is that, all custom method calls return the remote service response except &lsquo;get&rsquo;. &lsquo;get&rsquo; returns a hash (or array of hashes).</strong></p>

<pre><code># GET all managers(collection custom method), i.e. GET /people/managers.json
Person.get(:managers)
#=&gt; [{:name =&gt; "Rans"}, {:name =&gt; "Gokul"}]
</code></pre>

<p><strong>If you want to get actual objects from a get call, you can use the find method.</strong></p>

<pre><code># GET all managers(collection custom method), i.e. GET /people/managers.json
Person.find(:all, from: :managers)
#=&gt; &lt;#Person...&gt;&lt;#Person ...&gt;
</code></pre>

<p>Options :from &ndash; Sets the path or custom method that resources will be fetched from.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Form builder object on AJAX callback]]></title>
    <link href="http://ranjithkumar.github.io/blog/2014/04/18/form-builder-object-on-ajax-callback/"/>
    <updated>2014-04-18T16:23:06+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2014/04/18/form-builder-object-on-ajax-callback</id>
    <content type="html"><![CDATA[<p><strong>Problem:</strong></p>

<p>My application has a select box for users to choose a &ldquo;mapping&rdquo; for the upload. Based on mapping, user should see the default options selected in that form. When user changes the mapping, an AJAX request gets called and renders a js.erb file. The rendered js should render a partial that has fields_for a nested model. My challenge is, How to pass the form build object to the partial on AJAX callback?</p>

<!--more-->


<p><em>upload_page.html.erb:</em></p>

<pre><code>&lt;%= form_for :upload do |f| %&gt;
  Some divs....

  &lt;div&gt;
    &lt;label&gt;Mapping: &lt;/label&gt;
    &lt;%= f.select :mapping_id, options_from_collection_for_select(@mappings, "id"
    , "name"), {}, { class: "default_mapping_change" } %&gt;
  &lt;/div&gt;

  &lt;div id="mapping_option"&gt;
        &lt;%= render "mapping_option_form", f: f, default_mapping: @mapping %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code></pre>

<p>On my ajax callback, I replace &ldquo;mapping_option&rdquo; div with the update object.</p>

<p><strong>Solution:</strong></p>

<p>Create a new form in the js.erb file and passing that one to the partial.</p>

<p><em>default_mapping_change.js.erb:</em></p>

<pre><code>'&lt;%= form_for :upload do |f| %&gt;'
    $("#mapping_option").html("&lt;%= j(render "mapping_option_form", f: f,
    default_mapping: @mapping) %&gt;");
'&lt;% end %&gt;'
</code></pre>

<p><strong>The single quotes around the form tag are important, or else there will be some javascript escaping issue.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sidekiq configuration for SOA / multiple environments on same server]]></title>
    <link href="http://ranjithkumar.github.io/blog/2014/03/04/sidekiq-configuration-for-soa-multiple-environments-on-same-server/"/>
    <updated>2014-03-04T11:37:56+05:30</updated>
    <id>http://ranjithkumar.github.io/blog/2014/03/04/sidekiq-configuration-for-soa-multiple-environments-on-same-server</id>
    <content type="html"><![CDATA[<p>The Sidekiq configuration file by default located at <em>config/sidekiq.yml</em>. It is only necessary to create the file if you need to set advanced options, such as concurrency pool size, named queues, PID file location, etc.</p>

<!--more-->


<p>Here is an example configuration file:</p>

<pre><code>:concurrency: 5
:pidfile: tmp/pids/sidekiq.pid
staging:
 :concurrency: 10
production:
 :concurrency: 50
:queues:
 - default
</code></pre>

<p>By default, one Sidekiq process will be started on each app server.</p>

<p><strong>Setting the Location of your Redis server</strong></p>

<p>By default, Redis is located at <em>localhost:6379</em>.</p>

<p>Following is my development environment,
<em>SOA + Ruby(2.0) + Rails(4.0) + Unicorn  + Nginx  + SideKiq + MultiTenant</em></p>

<p>In your <em>config/initializers/sidekiq.rb</em> file,</p>

<pre><code>Sidekiq.configure_server do |config|
  config.redis = { url: 'redis://localhost:6379/0', namespace: "sidekiq_app_name_#{Rails.env}" }
end

Sidekiq.configure_client do |config|
  config.redis = { url: 'redis://localhost:6379/0', namespace: "sidekiq_app_name_#{Rails.env}" }
end
</code></pre>

<p>Usage:
<em>The :namespace parameter is recommended if Sidekiq is sharing access to a Redis database.</em></p>

<p>Finally, start sidekiq from the root directory of your Rails app.</p>

<blockquote>bundle exec sidekiq -e staging -C config/sidekiq.yml</blockquote>

]]></content>
  </entry>
  
</feed>
